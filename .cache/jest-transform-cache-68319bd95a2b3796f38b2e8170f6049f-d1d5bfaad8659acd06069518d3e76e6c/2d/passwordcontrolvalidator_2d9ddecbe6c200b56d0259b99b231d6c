5d627a7b63f7a3403d525e515d17ec72
"use strict";

/* istanbul ignore next */
function cov_1v4wvv1r3b() {
  var path = "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.ts";
  var hash = "a2fe0ae7f8f46e655e4989b948984cca47959a80";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 13,
          column: 10
        }
      },
      "4": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 43
        }
      },
      "5": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 11,
          column: 13
        }
      },
      "6": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 53
        }
      },
      "7": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 24
        }
      },
      "8": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 43
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 15
          },
          end: {
            line: 7,
            column: 16
          }
        },
        loc: {
          start: {
            line: 7,
            column: 28
          },
          end: {
            line: 13,
            column: 9
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 11,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 11,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 29
          }
        }, {
          start: {
            line: 9,
            column: 33
          },
          end: {
            line: 9,
            column: 65
          }
        }],
        line: 9
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.ts",
      mappings: ";;;AAEA,MAAM,OAAO,GAAG,4CAA4C,CAAC;AAE7D,MAAa,kBAAkB;IAC7B,MAAM,CAAC,6BAA6B;QAClC,OAAO,CAAC,OAAwB,EAA2B,EAAE;YAC3D,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;YAChC,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;gBACrD,OAAO,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;aACtC;YAED,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;IACJ,CAAC;CACF;AAXD,gDAWC",
      names: [],
      sources: ["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.ts"],
      sourcesContent: ["import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nconst pattern = \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}\";\n\nexport class PasswordValidators {\n  static isValueSatisfyFormatValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const reg = new RegExp(pattern);\n      if (control.value && !reg.test(String(control.value))) {\n        return { wrongPasswordFormat: true };\n      }\n\n      return null;\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a2fe0ae7f8f46e655e4989b948984cca47959a80"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v4wvv1r3b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1v4wvv1r3b();
cov_1v4wvv1r3b().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1v4wvv1r3b().s[1]++;
exports.PasswordValidators = void 0;
const pattern =
/* istanbul ignore next */
(cov_1v4wvv1r3b().s[2]++, "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}");

class PasswordValidators {
  static isValueSatisfyFormatValidator() {
    /* istanbul ignore next */
    cov_1v4wvv1r3b().f[0]++;
    cov_1v4wvv1r3b().s[3]++;
    return control => {
      /* istanbul ignore next */
      cov_1v4wvv1r3b().f[1]++;
      const reg =
      /* istanbul ignore next */
      (cov_1v4wvv1r3b().s[4]++, new RegExp(pattern));

      /* istanbul ignore next */
      cov_1v4wvv1r3b().s[5]++;

      if (
      /* istanbul ignore next */
      (cov_1v4wvv1r3b().b[1][0]++, control.value) &&
      /* istanbul ignore next */
      (cov_1v4wvv1r3b().b[1][1]++, !reg.test(String(control.value)))) {
        /* istanbul ignore next */
        cov_1v4wvv1r3b().b[0][0]++;
        cov_1v4wvv1r3b().s[6]++;
        return {
          wrongPasswordFormat: true
        };
      } else
      /* istanbul ignore next */
      {
        cov_1v4wvv1r3b().b[0][1]++;
      }

      cov_1v4wvv1r3b().s[7]++;
      return null;
    };
  }

}

/* istanbul ignore next */
cov_1v4wvv1r3b().s[8]++;
exports.PasswordValidators = PasswordValidators;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sLmt1emVua28vUEVSU09OQUwvbmctc3RhcnQvc3JjL2FwcC91bml0LXRlc3RzL2Zvcm0tdmFsaWRhdG9ycy9wYXNzd29yZC1jb250cm9sLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFGQSxNQUFNLE9BQU87QUFBQTtBQUFBLDBCQUFHLDRDQUFILENBQWI7O0FBRUEsTUFBYSxrQkFBYixDQUErQjtBQUM3QixTQUFPLDZCQUFQLEdBQW9DO0FBQUE7QUFBQTtBQUFBO0FBQ2xDLFdBQVEsT0FBRCxJQUFzRDtBQUFBO0FBQUE7QUFDM0QsWUFBTSxHQUFHO0FBQUE7QUFBQSxnQ0FBRyxJQUFJLE1BQUosQ0FBVyxPQUFYLENBQUgsQ0FBVDs7QUFEMkQ7QUFBQTs7QUFFM0Q7QUFBSTtBQUFBLG1DQUFBLE9BQU8sQ0FBQyxLQUFSO0FBQUE7QUFBQSxtQ0FBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSixDQUFTLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBVCxDQUFmLENBQWxCLENBQUosRUFBdUQ7QUFBQTtBQUFBO0FBQUE7QUFDckQsZUFBTztBQUFFLFVBQUEsbUJBQW1CLEVBQUU7QUFBdkIsU0FBUDtBQUNELE9BRkQ7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFGMkQ7QUFNM0QsYUFBTyxJQUFQO0FBQ0QsS0FQRDtBQVFEOztBQVY0Qjs7OztBQUEvQixPQUFBLENBQUEsa0JBQUEsR0FBQSxrQkFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yRm4gfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuY29uc3QgcGF0dGVybiA9IFwiXig/PS4qP1tBLVpdKSg/PS4qP1thLXpdKSg/PS4qP1swLTldKS57OCx9XCI7XG5cbmV4cG9ydCBjbGFzcyBQYXNzd29yZFZhbGlkYXRvcnMge1xuICBzdGF0aWMgaXNWYWx1ZVNhdGlzZnlGb3JtYXRWYWxpZGF0b3IoKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICAgIGlmIChjb250cm9sLnZhbHVlICYmICFyZWcudGVzdChTdHJpbmcoY29udHJvbC52YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiB7IHdyb25nUGFzc3dvcmRGb3JtYXQ6IHRydWUgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxufVxuIl19