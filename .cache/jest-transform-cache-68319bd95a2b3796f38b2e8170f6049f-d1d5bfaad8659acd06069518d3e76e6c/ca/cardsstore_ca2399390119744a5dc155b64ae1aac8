f028d0fd1e240a8631928485f7a8f376
"use strict";

/* istanbul ignore next */
function cov_2ho7ockbnv() {
  var path = "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/store/cards.store.ts";
  var hash = "8e364b53842f2b6da30cb8147939d8795db5b6a4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/store/cards.store.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "5": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "6": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 60
        }
      },
      "7": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "8": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 44,
          column: 1
        }
      },
      "9": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 28
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "11": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 58
        }
      },
      "12": {
        start: {
          line: 18,
          column: 45
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "13": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 62
        }
      },
      "14": {
        start: {
          line: 19,
          column: 47
        },
        end: {
          line: 19,
          column: 60
        }
      },
      "15": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 24,
          column: 13
        }
      },
      "16": {
        start: {
          line: 21,
          column: 51
        },
        end: {
          line: 24,
          column: 11
        }
      },
      "17": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 47
        }
      },
      "18": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 245
        }
      },
      "19": {
        start: {
          line: 23,
          column: 94
        },
        end: {
          line: 23,
          column: 203
        }
      },
      "20": {
        start: {
          line: 23,
          column: 122
        },
        end: {
          line: 23,
          column: 201
        }
      },
      "21": {
        start: {
          line: 23,
          column: 212
        },
        end: {
          line: 23,
          column: 242
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "23": {
        start: {
          line: 25,
          column: 49
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "24": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 47
        }
      },
      "25": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 286
        }
      },
      "26": {
        start: {
          line: 27,
          column: 99
        },
        end: {
          line: 27,
          column: 222
        }
      },
      "27": {
        start: {
          line: 27,
          column: 127
        },
        end: {
          line: 27,
          column: 220
        }
      },
      "28": {
        start: {
          line: 27,
          column: 231
        },
        end: {
          line: 27,
          column: 283
        }
      },
      "29": {
        start: {
          line: 27,
          column: 259
        },
        end: {
          line: 27,
          column: 281
        }
      },
      "30": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "31": {
        start: {
          line: 29,
          column: 52
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "32": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 47
        }
      },
      "33": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 34,
          column: 78
        }
      },
      "34": {
        start: {
          line: 31,
          column: 95
        },
        end: {
          line: 34,
          column: 14
        }
      },
      "35": {
        start: {
          line: 32,
          column: 37
        },
        end: {
          line: 32,
          column: 127
        }
      },
      "36": {
        start: {
          line: 32,
          column: 61
        },
        end: {
          line: 32,
          column: 125
        }
      },
      "37": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 109
        }
      },
      "38": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 75
        }
      },
      "39": {
        start: {
          line: 34,
          column: 51
        },
        end: {
          line: 34,
          column: 73
        }
      },
      "40": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "41": {
        start: {
          line: 36,
          column: 52
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "42": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 47
        }
      },
      "43": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 41,
          column: 78
        }
      },
      "44": {
        start: {
          line: 38,
          column: 97
        },
        end: {
          line: 41,
          column: 14
        }
      },
      "45": {
        start: {
          line: 39,
          column: 37
        },
        end: {
          line: 39,
          column: 85
        }
      },
      "46": {
        start: {
          line: 39,
          column: 66
        },
        end: {
          line: 39,
          column: 84
        }
      },
      "47": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 109
        }
      },
      "48": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 75
        }
      },
      "49": {
        start: {
          line: 41,
          column: 51
        },
        end: {
          line: 41,
          column: 73
        }
      },
      "50": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "51": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 49,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 18,
            column: 35
          }
        },
        loc: {
          start: {
            line: 18,
            column: 45
          },
          end: {
            line: 18,
            column: 56
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 36
          },
          end: {
            line: 19,
            column: 37
          }
        },
        loc: {
          start: {
            line: 19,
            column: 47
          },
          end: {
            line: 19,
            column: 60
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 21,
            column: 38
          }
        },
        loc: {
          start: {
            line: 21,
            column: 51
          },
          end: {
            line: 24,
            column: 11
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 87
          },
          end: {
            line: 21,
            column: 88
          }
        },
        loc: {
          start: {
            line: 21,
            column: 93
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 23,
            column: 83
          },
          end: {
            line: 23,
            column: 84
          }
        },
        loc: {
          start: {
            line: 23,
            column: 94
          },
          end: {
            line: 23,
            column: 203
          }
        },
        line: 23
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 23,
            column: 110
          },
          end: {
            line: 23,
            column: 111
          }
        },
        loc: {
          start: {
            line: 23,
            column: 122
          },
          end: {
            line: 23,
            column: 201
          }
        },
        line: 23
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 23,
            column: 205
          },
          end: {
            line: 23,
            column: 206
          }
        },
        loc: {
          start: {
            line: 23,
            column: 212
          },
          end: {
            line: 23,
            column: 242
          }
        },
        line: 23
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 25,
            column: 35
          },
          end: {
            line: 25,
            column: 36
          }
        },
        loc: {
          start: {
            line: 25,
            column: 49
          },
          end: {
            line: 28,
            column: 11
          }
        },
        line: 25
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 25,
            column: 85
          },
          end: {
            line: 25,
            column: 86
          }
        },
        loc: {
          start: {
            line: 25,
            column: 95
          },
          end: {
            line: 28,
            column: 9
          }
        },
        line: 25
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 27,
            column: 86
          },
          end: {
            line: 27,
            column: 87
          }
        },
        loc: {
          start: {
            line: 27,
            column: 99
          },
          end: {
            line: 27,
            column: 222
          }
        },
        line: 27
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 27,
            column: 115
          },
          end: {
            line: 27,
            column: 116
          }
        },
        loc: {
          start: {
            line: 27,
            column: 127
          },
          end: {
            line: 27,
            column: 220
          }
        },
        line: 27
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 27,
            column: 224
          },
          end: {
            line: 27,
            column: 225
          }
        },
        loc: {
          start: {
            line: 27,
            column: 231
          },
          end: {
            line: 27,
            column: 283
          }
        },
        line: 27
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 27,
            column: 247
          },
          end: {
            line: 27,
            column: 248
          }
        },
        loc: {
          start: {
            line: 27,
            column: 259
          },
          end: {
            line: 27,
            column: 281
          }
        },
        line: 27
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 29,
            column: 38
          },
          end: {
            line: 29,
            column: 39
          }
        },
        loc: {
          start: {
            line: 29,
            column: 52
          },
          end: {
            line: 35,
            column: 11
          }
        },
        line: 29
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 29,
            column: 88
          },
          end: {
            line: 29,
            column: 89
          }
        },
        loc: {
          start: {
            line: 29,
            column: 98
          },
          end: {
            line: 35,
            column: 9
          }
        },
        line: 29
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 31,
            column: 89
          },
          end: {
            line: 31,
            column: 90
          }
        },
        loc: {
          start: {
            line: 31,
            column: 95
          },
          end: {
            line: 34,
            column: 14
          }
        },
        line: 31
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 31,
            column: 111
          },
          end: {
            line: 31,
            column: 112
          }
        },
        loc: {
          start: {
            line: 31,
            column: 122
          },
          end: {
            line: 34,
            column: 13
          }
        },
        line: 31
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 32,
            column: 53
          },
          end: {
            line: 32,
            column: 54
          }
        },
        loc: {
          start: {
            line: 32,
            column: 61
          },
          end: {
            line: 32,
            column: 125
          }
        },
        line: 32
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 17
          }
        },
        loc: {
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 34,
            column: 75
          }
        },
        line: 34
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 34,
            column: 39
          },
          end: {
            line: 34,
            column: 40
          }
        },
        loc: {
          start: {
            line: 34,
            column: 51
          },
          end: {
            line: 34,
            column: 73
          }
        },
        line: 34
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 36,
            column: 38
          },
          end: {
            line: 36,
            column: 39
          }
        },
        loc: {
          start: {
            line: 36,
            column: 52
          },
          end: {
            line: 42,
            column: 11
          }
        },
        line: 36
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 36,
            column: 88
          },
          end: {
            line: 36,
            column: 89
          }
        },
        loc: {
          start: {
            line: 36,
            column: 100
          },
          end: {
            line: 42,
            column: 9
          }
        },
        line: 36
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 38,
            column: 91
          },
          end: {
            line: 38,
            column: 92
          }
        },
        loc: {
          start: {
            line: 38,
            column: 97
          },
          end: {
            line: 41,
            column: 14
          }
        },
        line: 38
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 38,
            column: 113
          },
          end: {
            line: 38,
            column: 114
          }
        },
        loc: {
          start: {
            line: 38,
            column: 124
          },
          end: {
            line: 41,
            column: 13
          }
        },
        line: 38
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 39,
            column: 56
          },
          end: {
            line: 39,
            column: 57
          }
        },
        loc: {
          start: {
            line: 39,
            column: 66
          },
          end: {
            line: 39,
            column: 84
          }
        },
        line: 39
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 17
          }
        },
        loc: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 75
          }
        },
        line: 41
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 41,
            column: 39
          },
          end: {
            line: 41,
            column: 40
          }
        },
        loc: {
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 73
          }
        },
        line: 41
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 171
          },
          end: {
            line: 23,
            column: 182
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 171
          },
          end: {
            line: 23,
            column: 176
          }
        }, {
          start: {
            line: 23,
            column: 180
          },
          end: {
            line: 23,
            column: 182
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 61
          },
          end: {
            line: 32,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 80
          },
          end: {
            line: 32,
            column: 121
          }
        }, {
          start: {
            line: 32,
            column: 124
          },
          end: {
            line: 32,
            column: 125
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/store/cards.store.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/store/cards.store.ts"],
      sourcesContent: ["import { Injectable } from \"@angular/core\";\nimport { ComponentStore, tapResponse } from \"@ngrx/component-store\";\nimport { Observable } from \"rxjs\";\nimport { switchMap } from \"rxjs/operators\";\nimport { Card } from \"../interfaces\";\nimport { CardsService } from \"../services/cards.service\";\n\n// The state model\nexport interface CardsState {\n  cards: Card[];\n  loading: boolean;\n}\n\nconst defaultState: CardsState = {\n  cards: [],\n  loading: false,\n};\n\n@Injectable()\nexport class CardsStore extends ComponentStore<CardsState> {\n  constructor(public cardsService: CardsService) {\n    super(defaultState);\n  }\n\n  // SELECTORS\n  readonly cards$: Observable<Card[]> = this.select((state) => state.cards);\n  readonly loading$: Observable<boolean> = this.select((state) => state.loading);\n\n  // EFFECTS\n  public readonly loadCards = this.effect((trigger$: Observable<void>) =>\n    trigger$.pipe(\n      switchMap(() => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.getCards().pipe(\n          tapResponse(\n            (cards) => this.patchState((state) => ({ ...state, cards: cards || [], loading: false })),\n            (_) => this.patchState({ cards: [] }),\n          ),\n        );\n      }),\n    ),\n  );\n\n  public readonly addCard = this.effect((trigger$: Observable<Card>) =>\n    trigger$.pipe(\n      switchMap((card: Card) => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.addCard(card).pipe(\n          tapResponse(\n            (newCard: Card) =>\n              this.patchState((state) => ({\n                ...state,\n                cards: [...state.cards, newCard],\n                loading: false,\n              })),\n            (_) => this.patchState((state) => ({ cards: state.cards })),\n          ),\n        );\n      }),\n    ),\n  );\n\n  public readonly updateCard = this.effect((trigger$: Observable<Card>) =>\n    trigger$.pipe(\n      switchMap((card: Card) => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.updateCard(card).pipe(\n          tapResponse(\n            () =>\n              this.patchState((state) => {\n                const updatedCards = state.cards.map((c: Card) => (c.id === card.id ? { ...c, ...card } : c));\n\n                return {\n                  ...state,\n                  cards: [...updatedCards],\n                  loading: false,\n                };\n              }),\n            (_) => this.patchState((state) => ({ cards: state.cards })),\n          ),\n        );\n      }),\n    ),\n  );\n\n  public readonly removeCard = this.effect((trigger$: Observable<string>) =>\n    trigger$.pipe(\n      switchMap((cardId: string) => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.deleteCard(cardId).pipe(\n          tapResponse(\n            () =>\n              this.patchState((state) => {\n                const updatedCards = state.cards.filter((card) => card.id !== cardId);\n\n                return {\n                  ...state,\n                  cards: [...updatedCards],\n                  loading: false,\n                };\n              }),\n            (_) => this.patchState((state) => ({ cards: state.cards })),\n          ),\n        );\n      }),\n    ),\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e364b53842f2b6da30cb8147939d8795db5b6a4"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ho7ockbnv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_2ho7ockbnv();
cov_2ho7ockbnv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_2ho7ockbnv().s[1]++;
exports.CardsStore = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_2ho7ockbnv().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_2ho7ockbnv().s[3]++, require("@angular/core"));
const component_store_1 =
/* istanbul ignore next */
(cov_2ho7ockbnv().s[4]++, require("@ngrx/component-store"));
const operators_1 =
/* istanbul ignore next */
(cov_2ho7ockbnv().s[5]++, require("rxjs/operators"));
const cards_service_1 =
/* istanbul ignore next */
(cov_2ho7ockbnv().s[6]++, require("../services/cards.service"));
const defaultState =
/* istanbul ignore next */
(cov_2ho7ockbnv().s[7]++, {
  cards: [],
  loading: false
});

/* istanbul ignore next */
cov_2ho7ockbnv().s[8]++;
let CardsStore = class CardsStore extends component_store_1.ComponentStore {
  constructor(cardsService) {
    /* istanbul ignore next */
    cov_2ho7ockbnv().f[0]++;
    cov_2ho7ockbnv().s[9]++;
    super(defaultState);

    /* istanbul ignore next */
    cov_2ho7ockbnv().s[10]++;
    this.cardsService = cardsService; // SELECTORS

    /* istanbul ignore next */
    cov_2ho7ockbnv().s[11]++;
    this.cards$ = this.select(state => {
      /* istanbul ignore next */
      cov_2ho7ockbnv().f[1]++;
      cov_2ho7ockbnv().s[12]++;
      return state.cards;
    });

    /* istanbul ignore next */
    cov_2ho7ockbnv().s[13]++;
    this.loading$ = this.select(state => {
      /* istanbul ignore next */
      cov_2ho7ockbnv().f[2]++;
      cov_2ho7ockbnv().s[14]++;
      return state.loading;
    }); // EFFECTS

    /* istanbul ignore next */
    cov_2ho7ockbnv().s[15]++;
    this.loadCards = this.effect(trigger$ => {
      /* istanbul ignore next */
      cov_2ho7ockbnv().f[3]++;
      cov_2ho7ockbnv().s[16]++;
      return trigger$.pipe(operators_1.switchMap(() => {
        /* istanbul ignore next */
        cov_2ho7ockbnv().f[4]++;
        cov_2ho7ockbnv().s[17]++;
        this.patchState({
          loading: true
        });

        /* istanbul ignore next */
        cov_2ho7ockbnv().s[18]++;
        return this.cardsService.getCards().pipe(component_store_1.tapResponse(cards => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[5]++;
          cov_2ho7ockbnv().s[19]++;
          return this.patchState(state => {
            /* istanbul ignore next */
            cov_2ho7ockbnv().f[6]++;
            cov_2ho7ockbnv().s[20]++;
            return Object.assign(Object.assign({}, state), {
              cards:
              /* istanbul ignore next */
              (cov_2ho7ockbnv().b[0][0]++, cards) ||
              /* istanbul ignore next */
              (cov_2ho7ockbnv().b[0][1]++, []),
              loading: false
            });
          });
        }, _ => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[7]++;
          cov_2ho7ockbnv().s[21]++;
          return this.patchState({
            cards: []
          });
        }));
      }));
    });

    /* istanbul ignore next */
    cov_2ho7ockbnv().s[22]++;
    this.addCard = this.effect(trigger$ => {
      /* istanbul ignore next */
      cov_2ho7ockbnv().f[8]++;
      cov_2ho7ockbnv().s[23]++;
      return trigger$.pipe(operators_1.switchMap(card => {
        /* istanbul ignore next */
        cov_2ho7ockbnv().f[9]++;
        cov_2ho7ockbnv().s[24]++;
        this.patchState({
          loading: true
        });

        /* istanbul ignore next */
        cov_2ho7ockbnv().s[25]++;
        return this.cardsService.addCard(card).pipe(component_store_1.tapResponse(newCard => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[10]++;
          cov_2ho7ockbnv().s[26]++;
          return this.patchState(state => {
            /* istanbul ignore next */
            cov_2ho7ockbnv().f[11]++;
            cov_2ho7ockbnv().s[27]++;
            return Object.assign(Object.assign({}, state), {
              cards: [...state.cards, newCard],
              loading: false
            });
          });
        }, _ => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[12]++;
          cov_2ho7ockbnv().s[28]++;
          return this.patchState(state => {
            /* istanbul ignore next */
            cov_2ho7ockbnv().f[13]++;
            cov_2ho7ockbnv().s[29]++;
            return {
              cards: state.cards
            };
          });
        }));
      }));
    });

    /* istanbul ignore next */
    cov_2ho7ockbnv().s[30]++;
    this.updateCard = this.effect(trigger$ => {
      /* istanbul ignore next */
      cov_2ho7ockbnv().f[14]++;
      cov_2ho7ockbnv().s[31]++;
      return trigger$.pipe(operators_1.switchMap(card => {
        /* istanbul ignore next */
        cov_2ho7ockbnv().f[15]++;
        cov_2ho7ockbnv().s[32]++;
        this.patchState({
          loading: true
        });

        /* istanbul ignore next */
        cov_2ho7ockbnv().s[33]++;
        return this.cardsService.updateCard(card).pipe(component_store_1.tapResponse(() => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[16]++;
          cov_2ho7ockbnv().s[34]++;
          return this.patchState(state => {
            /* istanbul ignore next */
            cov_2ho7ockbnv().f[17]++;
            const updatedCards =
            /* istanbul ignore next */
            (cov_2ho7ockbnv().s[35]++, state.cards.map(c => {
              /* istanbul ignore next */
              cov_2ho7ockbnv().f[18]++;
              cov_2ho7ockbnv().s[36]++;
              return c.id === card.id ?
              /* istanbul ignore next */
              (cov_2ho7ockbnv().b[1][0]++, Object.assign(Object.assign({}, c), card)) :
              /* istanbul ignore next */
              (cov_2ho7ockbnv().b[1][1]++, c);
            }));

            /* istanbul ignore next */
            cov_2ho7ockbnv().s[37]++;
            return Object.assign(Object.assign({}, state), {
              cards: [...updatedCards],
              loading: false
            });
          });
        }, _ => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[19]++;
          cov_2ho7ockbnv().s[38]++;
          return this.patchState(state => {
            /* istanbul ignore next */
            cov_2ho7ockbnv().f[20]++;
            cov_2ho7ockbnv().s[39]++;
            return {
              cards: state.cards
            };
          });
        }));
      }));
    });

    /* istanbul ignore next */
    cov_2ho7ockbnv().s[40]++;
    this.removeCard = this.effect(trigger$ => {
      /* istanbul ignore next */
      cov_2ho7ockbnv().f[21]++;
      cov_2ho7ockbnv().s[41]++;
      return trigger$.pipe(operators_1.switchMap(cardId => {
        /* istanbul ignore next */
        cov_2ho7ockbnv().f[22]++;
        cov_2ho7ockbnv().s[42]++;
        this.patchState({
          loading: true
        });

        /* istanbul ignore next */
        cov_2ho7ockbnv().s[43]++;
        return this.cardsService.deleteCard(cardId).pipe(component_store_1.tapResponse(() => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[23]++;
          cov_2ho7ockbnv().s[44]++;
          return this.patchState(state => {
            /* istanbul ignore next */
            cov_2ho7ockbnv().f[24]++;
            const updatedCards =
            /* istanbul ignore next */
            (cov_2ho7ockbnv().s[45]++, state.cards.filter(card => {
              /* istanbul ignore next */
              cov_2ho7ockbnv().f[25]++;
              cov_2ho7ockbnv().s[46]++;
              return card.id !== cardId;
            }));

            /* istanbul ignore next */
            cov_2ho7ockbnv().s[47]++;
            return Object.assign(Object.assign({}, state), {
              cards: [...updatedCards],
              loading: false
            });
          });
        }, _ => {
          /* istanbul ignore next */
          cov_2ho7ockbnv().f[26]++;
          cov_2ho7ockbnv().s[48]++;
          return this.patchState(state => {
            /* istanbul ignore next */
            cov_2ho7ockbnv().f[27]++;
            cov_2ho7ockbnv().s[49]++;
            return {
              cards: state.cards
            };
          });
        }));
      }));
    });
  }

};

/* istanbul ignore next */
cov_2ho7ockbnv().s[50]++;
CardsStore = tslib_1.__decorate([core_1.Injectable(), tslib_1.__metadata("design:paramtypes", [cards_service_1.CardsService])], CardsStore);

/* istanbul ignore next */
cov_2ho7ockbnv().s[51]++;
exports.CardsStore = CardsStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,