2e4170bd38c5308833cb531e7fcf8ae4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import 'document-register-element';
require("jest-preset-angular/setup-jest"); // commented out due to issue in latest jest-preset-angular
// require('dotenv').config();
Error.stackTraceLimit = 2;
const CI = process.env["CI"] === "true";
/**
 * GLOBAL MOCKS
 */
Object.defineProperty(window, "CSS", { value: null });
Object.defineProperty(document, "doctype", {
    value: "<!DOCTYPE html>",
});
Object.defineProperty(window, "getComputedStyle", {
    value: () => ({
        display: "none",
        appearance: ["-webkit-appearance"],
    }),
});
Object.defineProperty(window.navigator, "userAgent", ((value) => ({
    get() {
        return value;
    },
    set(v) {
        value = v;
    },
}))(window.navigator["userAgent"]));
if (CI) {
    const consoleMethods = ["trace", "debug", "warn", "log", "group", "groupCollapsed"];
    consoleMethods.forEach((methodName) => {
        jest.spyOn(global.console, methodName).mockImplementation(() => jest.fn());
    });
}
// https://github.com/angular/angular/issues/20827#issuecomment-394487432
window["__zone_symbol__supportWaitUnResolvedChainedPromise"] = true;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2wua3V6ZW5rby9QRVJTT05BTC9uZy1zdGFydC9qZXN0LmJhc2Uuc2V0dXAudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBc0M7QUFDdEMsMENBQXdDLENBQUMsMkRBQTJEO0FBRXBHLDhCQUE4QjtBQUM5QixLQUFLLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztBQUMxQixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLE1BQU0sQ0FBQztBQUV4Qzs7R0FFRztBQUVILE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRTtJQUN6QyxLQUFLLEVBQUUsaUJBQWlCO0NBQ3pCLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFFO0lBQ2hELEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ1osT0FBTyxFQUFFLE1BQU07UUFDZixVQUFVLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztLQUNuQyxDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLGNBQWMsQ0FDbkIsTUFBTSxDQUFDLFNBQVMsRUFDaEIsV0FBVyxFQUNYLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDWCxHQUFHO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0QsR0FBRyxDQUFDLENBQVM7UUFDWCxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ1osQ0FBQztDQUNGLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FDbkMsQ0FBQztBQUVGLElBQUksRUFBRSxFQUFFO0lBQ04sTUFBTSxjQUFjLEdBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFFOUYsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBaUIsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BGLENBQUMsQ0FBQyxDQUFDO0NBQ0o7QUFFRCx5RUFBeUU7QUFDeEUsTUFBYyxDQUFDLG9EQUFvRCxDQUFDLEdBQUcsSUFBSSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9sLmt1emVua28vUEVSU09OQUwvbmctc3RhcnQvamVzdC5iYXNlLnNldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAnZG9jdW1lbnQtcmVnaXN0ZXItZWxlbWVudCc7XG5pbXBvcnQgXCJqZXN0LXByZXNldC1hbmd1bGFyL3NldHVwLWplc3RcIjsgLy8gY29tbWVudGVkIG91dCBkdWUgdG8gaXNzdWUgaW4gbGF0ZXN0IGplc3QtcHJlc2V0LWFuZ3VsYXJcblxuLy8gcmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5FcnJvci5zdGFja1RyYWNlTGltaXQgPSAyO1xuY29uc3QgQ0kgPSBwcm9jZXNzLmVudltcIkNJXCJdID09PSBcInRydWVcIjtcblxuLyoqXG4gKiBHTE9CQUwgTU9DS1NcbiAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCBcIkNTU1wiLCB7IHZhbHVlOiBudWxsIH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50LCBcImRvY3R5cGVcIiwge1xuICB2YWx1ZTogXCI8IURPQ1RZUEUgaHRtbD5cIixcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCBcImdldENvbXB1dGVkU3R5bGVcIiwge1xuICB2YWx1ZTogKCkgPT4gKHtcbiAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICBhcHBlYXJhbmNlOiBbXCItd2Via2l0LWFwcGVhcmFuY2VcIl0sXG4gIH0pLFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gIHdpbmRvdy5uYXZpZ2F0b3IsXG4gIFwidXNlckFnZW50XCIsXG4gICgodmFsdWUpID0+ICh7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0KHY6IHN0cmluZykge1xuICAgICAgdmFsdWUgPSB2O1xuICAgIH0sXG4gIH0pKSh3aW5kb3cubmF2aWdhdG9yW1widXNlckFnZW50XCJdKSxcbik7XG5cbmlmIChDSSkge1xuICBjb25zdCBjb25zb2xlTWV0aG9kczogc3RyaW5nW10gPSBbXCJ0cmFjZVwiLCBcImRlYnVnXCIsIFwid2FyblwiLCBcImxvZ1wiLCBcImdyb3VwXCIsIFwiZ3JvdXBDb2xsYXBzZWRcIl07XG5cbiAgY29uc29sZU1ldGhvZHMuZm9yRWFjaCgobWV0aG9kTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgamVzdC5zcHlPbihnbG9iYWwuY29uc29sZSwgbWV0aG9kTmFtZSBhcyBhbnkpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBqZXN0LmZuKCkpO1xuICB9KTtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjA4MjcjaXNzdWVjb21tZW50LTM5NDQ4NzQzMlxuKHdpbmRvdyBhcyBhbnkpW1wiX196b25lX3N5bWJvbF9fc3VwcG9ydFdhaXRVblJlc29sdmVkQ2hhaW5lZFByb21pc2VcIl0gPSB0cnVlO1xuIl0sInZlcnNpb24iOjN9