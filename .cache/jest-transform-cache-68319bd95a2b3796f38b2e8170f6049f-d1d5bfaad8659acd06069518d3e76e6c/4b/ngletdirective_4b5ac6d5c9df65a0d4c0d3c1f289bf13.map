{"version":3,"sources":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/directives/ng-let.directive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AAEA,MAAa,UAAb,CAAuB;AACrB,EAAA,WAAA,CAA6B,GAA7B,EAAiD;AAAA;AAAA;AAAA;AAApB,SAAA,GAAA,GAAA,GAAA;AAAwB;;AAErD,MAAI,KAAJ,GAAS;AAAA;AAAA;AAAA;AACP,WAAO,KAAK,GAAL,CAAS,KAAhB;AACD;;AALoB;;;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA;AAQA;;;;;;;;AAQG;;;;AAIH,IAAa,YAAY,GAAzB,MAAa,YAAb,CAAyB;AAIvB,EAAA,WAAA,CAC4B,aAD5B,EAEuB,WAFvB,EAE8D;AAAA;AAAA;AAAA;AAE5D,IAAA,aAAa,CAAC,kBAAd,CAAiC,WAAjC,EAA8C,IAAI,UAAJ,CAAkB,IAAlB,CAA9C;AACD;;AATsB,CAAzB;;;;;AAEE,OAAA,CAAA,UAAA,CAAA,CADC,MAAA,CAAA,KAAA,EACD,E,yCAAA,CAAA,E,sBAAA,E,OAAA,E,KAAS,CAAT;;;;AAFW,YAAY,GAAA,OAAA,CAAA,UAAA,CAAA,CAHxB,MAAA,CAAA,SAAA,CAAU;AACT,EAAA,QAAQ,EAAE;AADD,CAAV,CAGwB,EAKpB,OAAA,CAAA,OAAA,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAO,MAAA,CAAA,gBAAP,CAAA,CALoB,EAMpB,OAAA,CAAA,OAAA,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAO,MAAA,CAAA,WAAP,CAAA,CANoB,E,yCAKoB,MAAA,CAAA,gB,EACP,MAAA,CAAA,W,EANb,CAAA,EAAZ,YAAY,CAAZ;;;;AAAA,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from \"@angular/core\";\n\nexport class LetContext<T> {\n  constructor(private readonly dir: LetDirective<T>) {}\n\n  get ngLet(): T {\n    return this.dir.ngLet;\n  }\n}\n\n/**\n * Works like *ngIf but does not have a condition\n * Use it to declare the result of pipes calculation\n * (i.e. async pipe)\n *\n * <ng-container *ngLet=\"stream$ | async as value\">\n *   {{ value }}\n * </ng-container>\n */\n@Directive({\n  selector: \"[bbNgLet]\",\n})\nexport class LetDirective<T> {\n  @Input()\n  ngLet: T;\n\n  constructor(\n    @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\n    @Inject(TemplateRef) templateRef: TemplateRef<LetContext<T>>,\n  ) {\n    viewContainer.createEmbeddedView(templateRef, new LetContext<T>(this));\n  }\n}\n"]}