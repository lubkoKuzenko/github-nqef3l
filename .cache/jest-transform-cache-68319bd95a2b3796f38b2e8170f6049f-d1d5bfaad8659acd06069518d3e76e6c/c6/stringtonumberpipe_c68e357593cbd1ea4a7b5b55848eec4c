494f6f70645c8f7f8256329496114e67
"use strict";

/* istanbul ignore next */
function cov_s3o1kxdsp() {
  var path = "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/pipes/string-to-number.pipe.ts";
  var hash = "5962d48d0722fd42683f0d3f7bcfe40489990a35";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/pipes/string-to-number.pipe.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "5": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 9,
          column: 23
        }
      },
      "6": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 9,
          column: 23
        }
      },
      "7": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "8": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "10": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 18,
          column: 17
        }
      },
      "11": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 21
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 9,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 9,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 10,
            column: 12
          },
          end: {
            line: 10,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 12
          },
          end: {
            line: 10,
            column: 37
          }
        }, {
          start: {
            line: 10,
            column: 41
          },
          end: {
            line: 10,
            column: 66
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/pipes/string-to-number.pipe.ts",
      mappings: ";;;;AAAA,wCAAoD;AAGpD,IAAa,YAAY,GAAzB,MAAa,YAAY;IACvB,SAAS,CAAC,KAAsB;QAC9B,IAAI,CAAC,KAAK;YAAE,OAAO,GAAG,CAAC;QAEvB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1D,OAAO,GAAG,CAAC;SACZ;QACD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;CACF,CAAA;AATY,YAAY;IADxB,WAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;GACd,YAAY,CASxB;AATY,oCAAY",
      names: [],
      sources: ["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/pipes/string-to-number.pipe.ts"],
      sourcesContent: ["import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({ name: \"toNumber\" })\nexport class ToNumberPipe implements PipeTransform {\n  transform(value: string | number): number {\n    if (!value) return NaN;\n\n    if (typeof value === \"string\" && value.trim().length === 0) {\n      return NaN;\n    }\n    return Number(value);\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5962d48d0722fd42683f0d3f7bcfe40489990a35"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_s3o1kxdsp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_s3o1kxdsp();
cov_s3o1kxdsp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_s3o1kxdsp().s[1]++;
exports.ToNumberPipe = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_s3o1kxdsp().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_s3o1kxdsp().s[3]++, require("@angular/core"));

/* istanbul ignore next */
cov_s3o1kxdsp().s[4]++;
let ToNumberPipe = class ToNumberPipe {
  transform(value) {
    /* istanbul ignore next */
    cov_s3o1kxdsp().f[0]++;
    cov_s3o1kxdsp().s[5]++;

    if (!value) {
      /* istanbul ignore next */
      cov_s3o1kxdsp().b[0][0]++;
      cov_s3o1kxdsp().s[6]++;
      return NaN;
    } else
    /* istanbul ignore next */
    {
      cov_s3o1kxdsp().b[0][1]++;
    }

    cov_s3o1kxdsp().s[7]++;

    if (
    /* istanbul ignore next */
    (cov_s3o1kxdsp().b[2][0]++, typeof value === "string") &&
    /* istanbul ignore next */
    (cov_s3o1kxdsp().b[2][1]++, value.trim().length === 0)) {
      /* istanbul ignore next */
      cov_s3o1kxdsp().b[1][0]++;
      cov_s3o1kxdsp().s[8]++;
      return NaN;
    } else
    /* istanbul ignore next */
    {
      cov_s3o1kxdsp().b[1][1]++;
    }

    cov_s3o1kxdsp().s[9]++;
    return Number(value);
  }

};

/* istanbul ignore next */
cov_s3o1kxdsp().s[10]++;
ToNumberPipe = tslib_1.__decorate([core_1.Pipe({
  name: "toNumber"
})], ToNumberPipe);

/* istanbul ignore next */
cov_s3o1kxdsp().s[11]++;
exports.ToNumberPipe = ToNumberPipe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sLmt1emVua28vUEVSU09OQUwvbmctc3RhcnQvc3JjL2FwcC91bml0LXRlc3RzL3BpcGVzL3N0cmluZy10by1udW1iZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHeUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSHpCLE1BQUEsTUFBQTtBQUFBO0FBQUEseUJBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBOzs7O0FBR0EsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBYixDQUF5QjtBQUN2QixFQUFBLFNBQVMsQ0FBQyxLQUFELEVBQXVCO0FBQUE7QUFBQTtBQUFBOztBQUM5QixRQUFJLENBQUMsS0FBTCxFQUFZO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFBTyxHQUFQO0FBQVcsS0FBdkI7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFEOEI7O0FBRzlCO0FBQUk7QUFBQSx1Q0FBTyxLQUFQLEtBQWlCLFFBQWpCO0FBQUE7QUFBQSxnQ0FBNkIsS0FBSyxDQUFDLElBQU4sR0FBYSxNQUFiLEtBQXdCLENBQXJELENBQUosRUFBNEQ7QUFBQTtBQUFBO0FBQUE7QUFDMUQsYUFBTyxHQUFQO0FBQ0QsS0FGRDtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUg4QjtBQU05QixXQUFPLE1BQU0sQ0FBQyxLQUFELENBQWI7QUFDRDs7QUFSc0IsQ0FBekI7Ozs7QUFBYSxZQUFZLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQSxDQUR4QixNQUFBLENBQUEsSUFBQSxDQUFLO0FBQUUsRUFBQSxJQUFJLEVBQUU7QUFBUixDQUFMLENBQ3dCLENBQUEsRUFBWixZQUFZLENBQVo7Ozs7QUFBQSxPQUFBLENBQUEsWUFBQSxHQUFBLFlBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQFBpcGUoeyBuYW1lOiBcInRvTnVtYmVyXCIgfSlcbmV4cG9ydCBjbGFzcyBUb051bWJlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICghdmFsdWUpIHJldHVybiBOYU47XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICB9XG59XG4iXX0=