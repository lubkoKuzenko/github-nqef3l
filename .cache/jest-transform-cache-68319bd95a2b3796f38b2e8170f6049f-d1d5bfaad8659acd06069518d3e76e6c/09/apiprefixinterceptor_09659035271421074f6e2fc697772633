1dd0965f548c7b7824537a0809660d0d
"use strict";

/* istanbul ignore next */
function cov_2qpuxx3ltv() {
  var path = "/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/interceptor/api-prefix.interceptor.ts";
  var hash = "89923d2912965787a1572b8fd91540ed5525d861";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/interceptor/api-prefix.interceptor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 38
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 49
        }
      },
      "5": {
        start: {
          line: 10,
          column: 27
        },
        end: {
          line: 17,
          column: 1
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "7": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 96
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 36
        }
      },
      "9": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 22,
          column: 25
        }
      },
      "10": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 11
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 8
          },
          end: {
            line: 14,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/interceptor/api-prefix.interceptor.ts",
      mappings: ";;;;AAAA,wCAA2C;AAI3C,kDAA+C;AAE/C;;GAEG;AAIH,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAC/B,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACxC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,yBAAW,CAAC,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;SACvE;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;CACF,CAAA;AAPY,oBAAoB;IAHhC,iBAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,oBAAoB,CAOhC;AAPY,oDAAoB",
      names: [],
      sources: ["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/interceptor/api-prefix.interceptor.ts"],
      sourcesContent: ["import { Injectable } from \"@angular/core\";\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { environment } from \"@env/environment\";\n\n/**\n * Prefixes all requests not starting with `http[s]` with `environment.serverUrl`.\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ApiPrefixInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!/^(http|https):/i.test(request.url)) {\n      request = request.clone({ url: environment.serverUrl + request.url });\n    }\n    return next.handle(request);\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "89923d2912965787a1572b8fd91540ed5525d861"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qpuxx3ltv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_2qpuxx3ltv();
cov_2qpuxx3ltv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_2qpuxx3ltv().s[1]++;
exports.ApiPrefixInterceptor = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_2qpuxx3ltv().s[2]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_2qpuxx3ltv().s[3]++, require("@angular/core"));
const environment_1 =
/* istanbul ignore next */
(cov_2qpuxx3ltv().s[4]++, require("@env/environment"));
/**
 * Prefixes all requests not starting with `http[s]` with `environment.serverUrl`.
 */

/* istanbul ignore next */
cov_2qpuxx3ltv().s[5]++;
let ApiPrefixInterceptor = class ApiPrefixInterceptor {
  intercept(request, next) {
    /* istanbul ignore next */
    cov_2qpuxx3ltv().f[0]++;
    cov_2qpuxx3ltv().s[6]++;

    if (!/^(http|https):/i.test(request.url)) {
      /* istanbul ignore next */
      cov_2qpuxx3ltv().b[0][0]++;
      cov_2qpuxx3ltv().s[7]++;
      request = request.clone({
        url: environment_1.environment.serverUrl + request.url
      });
    } else
    /* istanbul ignore next */
    {
      cov_2qpuxx3ltv().b[0][1]++;
    }

    cov_2qpuxx3ltv().s[8]++;
    return next.handle(request);
  }

};

/* istanbul ignore next */
cov_2qpuxx3ltv().s[9]++;
ApiPrefixInterceptor = tslib_1.__decorate([core_1.Injectable({
  providedIn: "root"
})], ApiPrefixInterceptor);

/* istanbul ignore next */
cov_2qpuxx3ltv().s[10]++;
exports.ApiPrefixInterceptor = ApiPrefixInterceptor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sLmt1emVua28vUEVSU09OQUwvbmctc3RhcnQvc3JjL2FwcC9AY29yZS9pbnRlcmNlcHRvci9hcGktcHJlZml4LmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWxCSCxNQUFBLE1BQUE7QUFBQTtBQUFBLDBCQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTtBQUlBLE1BQUEsYUFBQTtBQUFBO0FBQUEsMEJBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUEsQ0FBQTtBQUVBOztBQUVHOzs7O0FBSUgsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBYixDQUFpQztBQUMvQixFQUFBLFNBQVMsQ0FBQyxPQUFELEVBQTRCLElBQTVCLEVBQTZDO0FBQUE7QUFBQTtBQUFBOztBQUNwRCxRQUFJLENBQUMsa0JBQWtCLElBQWxCLENBQXVCLE9BQU8sQ0FBQyxHQUEvQixDQUFMLEVBQTBDO0FBQUE7QUFBQTtBQUFBO0FBQ3hDLE1BQUEsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFSLENBQWM7QUFBRSxRQUFBLEdBQUcsRUFBRSxhQUFBLENBQUEsV0FBQSxDQUFZLFNBQVosR0FBd0IsT0FBTyxDQUFDO0FBQXZDLE9BQWQsQ0FBVjtBQUNELEtBRkQ7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFEb0Q7QUFJcEQsV0FBTyxJQUFJLENBQUMsTUFBTCxDQUFZLE9BQVosQ0FBUDtBQUNEOztBQU44QixDQUFqQzs7OztBQUFhLG9CQUFvQixHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsQ0FIaEMsTUFBQSxDQUFBLFVBQUEsQ0FBVztBQUNWLEVBQUEsVUFBVSxFQUFFO0FBREYsQ0FBWCxDQUdnQyxDQUFBLEVBQXBCLG9CQUFvQixDQUFwQjs7OztBQUFBLE9BQUEsQ0FBQSxvQkFBQSxHQUFBLG9CQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBJbnRlcmNlcHRvciwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcblxuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tIFwiQGVudi9lbnZpcm9ubWVudFwiO1xuXG4vKipcbiAqIFByZWZpeGVzIGFsbCByZXF1ZXN0cyBub3Qgc3RhcnRpbmcgd2l0aCBgaHR0cFtzXWAgd2l0aCBgZW52aXJvbm1lbnQuc2VydmVyVXJsYC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBcInJvb3RcIixcbn0pXG5leHBvcnQgY2xhc3MgQXBpUHJlZml4SW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKCEvXihodHRwfGh0dHBzKTovaS50ZXN0KHJlcXVlc3QudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IHJlcXVlc3QuY2xvbmUoeyB1cmw6IGVudmlyb25tZW50LnNlcnZlclVybCArIHJlcXVlc3QudXJsIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gIH1cbn1cbiJdfQ==