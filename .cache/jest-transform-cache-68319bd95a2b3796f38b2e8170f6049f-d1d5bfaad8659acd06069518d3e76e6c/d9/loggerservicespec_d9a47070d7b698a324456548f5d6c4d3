1ad72e74a06c6dbb26343a1711e75f78
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint no-console: 0 */
const logger_service_1 = require("./logger.service");
const logMethods = ["log", "info", "warn", "error"];
describe("Logger", () => {
    let savedConsole;
    let savedLevel;
    let savedOutputs;
    beforeAll(() => {
        savedConsole = [];
        logMethods.forEach((m) => {
            savedConsole[m] = console[m];
            console[m] = () => { };
        });
        savedLevel = logger_service_1.Logger.level;
        savedOutputs = logger_service_1.Logger.outputs;
    });
    beforeEach(() => {
        logger_service_1.Logger.level = logger_service_1.LogLevel.debug;
    });
    afterAll(() => {
        logMethods.forEach((m) => {
            console[m] = savedConsole[m];
        });
        logger_service_1.Logger.level = savedLevel;
        logger_service_1.Logger.outputs = savedOutputs;
    });
    it("should create an instance", () => {
        expect(new logger_service_1.Logger()).toBeTruthy();
    });
    it("should add a new LogOutput and receives log entries", () => {
        // Arrange
        const outputSpy = jasmine.createSpy("outputSpy");
        const log = new logger_service_1.Logger("test");
        // Act
        logger_service_1.Logger.outputs.push(outputSpy);
        log.debug("d");
        log.info("i");
        log.warn("w");
        log.error("e", { error: true });
        // Assert
        expect(outputSpy).toHaveBeenCalled();
        expect(outputSpy.calls.count()).toBe(4);
        expect(outputSpy).toHaveBeenCalledWith("test", logger_service_1.LogLevel.debug, "d");
        expect(outputSpy).toHaveBeenCalledWith("test", logger_service_1.LogLevel.info, "i");
        expect(outputSpy).toHaveBeenCalledWith("test", logger_service_1.LogLevel.warning, "w");
        expect(outputSpy).toHaveBeenCalledWith("test", logger_service_1.LogLevel.error, "e", { error: true });
    });
    it("should add a new LogOutput and receives only production log entries", () => {
        // Arrange
        const outputSpy = jasmine.createSpy("outputSpy");
        const log = new logger_service_1.Logger("test");
        // Act
        logger_service_1.Logger.outputs.push(outputSpy);
        logger_service_1.Logger.enableProductionMode();
        log.debug("d");
        log.info("i");
        log.warn("w");
        log.error("e", { error: true });
        // Assert
        expect(outputSpy).toHaveBeenCalled();
        expect(outputSpy.calls.count()).toBe(2);
        expect(outputSpy).toHaveBeenCalledWith("test", logger_service_1.LogLevel.warning, "w");
        expect(outputSpy).toHaveBeenCalledWith("test", logger_service_1.LogLevel.error, "e", { error: true });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2wua3V6ZW5rby9QRVJTT05BTC9uZy1zdGFydC9zcmMvYXBwL0Bjb3JlL3NlcnZpY2VzL2xvZ2dlci5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQkFBMEI7QUFDMUIscURBQStEO0FBRS9ELE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFcEQsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDdEIsSUFBSSxZQUFtQixDQUFDO0lBQ3hCLElBQUksVUFBb0IsQ0FBQztJQUN6QixJQUFJLFlBQXlCLENBQUM7SUFFOUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDbEIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztRQUNILFVBQVUsR0FBRyx1QkFBTSxDQUFDLEtBQUssQ0FBQztRQUMxQixZQUFZLEdBQUcsdUJBQU0sQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsdUJBQU0sQ0FBQyxLQUFLLEdBQUcseUJBQVEsQ0FBQyxLQUFLLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ1osVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7UUFDSCx1QkFBTSxDQUFDLEtBQUssR0FBRyxVQUFVLENB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UUFDdEUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSx5QkFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9sLmt1emVua28vUEVSU09OQUwvbmctc3RhcnQvc3JjL2FwcC9AY29yZS9zZXJ2aWNlcy9sb2dnZXIuc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1jb25zb2xlOiAwICovXG5pbXBvcnQgeyBMb2dnZXIsIExvZ0xldmVsLCBMb2dPdXRwdXQgfSBmcm9tIFwiLi9sb2dnZXIuc2VydmljZVwiO1xuXG5jb25zdCBsb2dNZXRob2RzID0gW1wibG9nXCIsIFwiaW5mb1wiLCBcIndhcm5cIiwgXCJlcnJvclwiXTtcblxuZGVzY3JpYmUoXCJMb2dnZXJcIiwgKCkgPT4ge1xuICBsZXQgc2F2ZWRDb25zb2xlOiBhbnlbXTtcbiAgbGV0IHNhdmVkTGV2ZWw6IExvZ0xldmVsO1xuICBsZXQgc2F2ZWRPdXRwdXRzOiBMb2dPdXRwdXRbXTtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIHNhdmVkQ29uc29sZSA9IFtdO1xuICAgIGxvZ01ldGhvZHMuZm9yRWFjaCgobSkgPT4ge1xuICAgICAgc2F2ZWRDb25zb2xlW21dID0gY29uc29sZVttXTtcbiAgICAgIGNvbnNvbGVbbV0gPSAoKSA9PiB7fTtcbiAgICB9KTtcbiAgICBzYXZlZExldmVsID0gTG9nZ2VyLmxldmVsO1xuICAgIHNhdmVkT3V0cHV0cyA9IExvZ2dlci5vdXRwdXRzO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBMb2dnZXIubGV2ZWwgPSBMb2dMZXZlbC5kZWJ1ZztcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGxvZ01ldGhvZHMuZm9yRWFjaCgobSkgPT4ge1xuICAgICAgY29uc29sZVttXSA9IHNhdmVkQ29uc29sZVttXTtcbiAgICB9KTtcbiAgICBMb2dnZXIubGV2ZWwgPSBzYXZlZExldmVsO1xuICAgIExvZ2dlci5vdXRwdXRzID0gc2F2ZWRPdXRwdXRzO1xuICB9KTtcblxuICBpdChcInNob3VsZCBjcmVhdGUgYW4gaW5zdGFuY2VcIiwgKCkgPT4ge1xuICAgIGV4cGVjdChuZXcgTG9nZ2VyKCkpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgYWRkIGEgbmV3IExvZ091dHB1dCBhbmQgcmVjZWl2ZXMgbG9nIGVudHJpZXNcIiwgKCkgPT4ge1xuICAgIC8vIEFycmFuZ2VcbiAgICBjb25zdCBvdXRwdXRTcHkgPSBqYXNtaW5lLmNyZWF0ZVNweShcIm91dHB1dFNweVwiKTtcbiAgICBjb25zdCBsb2cgPSBuZXcgTG9nZ2VyKFwidGVzdFwiKTtcblxuICAgIC8vIEFjdFxuICAgIExvZ2dlci5vdXRwdXRzLnB1c2gob3V0cHV0U3B5KTtcblxuICAgIGxvZy5kZWJ1ZyhcImRcIik7XG4gICAgbG9nLmluZm8oXCJpXCIpO1xuICAgIGxvZy53YXJuKFwid1wiKTtcbiAgICBsb2cuZXJyb3IoXCJlXCIsIHsgZXJyb3I6IHRydWUgfSk7XG5cbiAgICAvLyBBc3NlcnRcbiAgICBleHBlY3Qob3V0cHV0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KG91dHB1dFNweS5jYWxscy5jb3VudCgpKS50b0JlKDQpO1xuICAgIGV4cGVjdChvdXRwdXRTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwidGVzdFwiLCBMb2dMZXZlbC5kZWJ1ZywgXCJkXCIpO1xuICAgIGV4cGVjdChvdXRwdXRTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwidGVzdFwiLCBMb2dMZXZlbC5pbmZvLCBcImlcIik7XG4gICAgZXhwZWN0KG91dHB1dFNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCJ0ZXN0XCIsIExvZ0xldmVsLndhcm5pbmcsIFwid1wiKTtcbiAgICBleHBlY3Qob3V0cHV0U3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcInRlc3RcIiwgTG9nTGV2ZWwuZXJyb3IsIFwiZVwiLCB7IGVycm9yOiB0cnVlIH0pO1xuICB9KTtcblxuICBpdChcInNob3VsZCBhZGQgYSBuZXcgTG9nT3V0cHV0IGFuZCByZWNlaXZlcyBvbmx5IHByb2R1Y3Rpb24gbG9nIGVudHJpZXNcIiwgKCkgPT4ge1xuICAgIC8vIEFycmFuZ2VcbiAgICBjb25zdCBvdXRwdXRTcHkgPSBqYXNtaW5lLmNyZWF0ZVNweShcIm91dHB1dFNweVwiKTtcbiAgICBjb25zdCBsb2cgPSBuZXcgTG9nZ2VyKFwidGVzdFwiKTtcblxuICAgIC8vIEFjdFxuICAgIExvZ2dlci5vdXRwdXRzLnB1c2gob3V0cHV0U3B5KTtcbiAgICBMb2dnZXIuZW5hYmxlUHJvZHVjdGlvbk1vZGUoKTtcblxuICAgIGxvZy5kZWJ1ZyhcImRcIik7XG4gICAgbG9nLmluZm8oXCJpXCIpO1xuICAgIGxvZy53YXJuKFwid1wiKTtcbiAgICBsb2cuZXJyb3IoXCJlXCIsIHsgZXJyb3I6IHRydWUgfSk7XG5cbiAgICAvLyBBc3NlcnRcbiAgICBleHBlY3Qob3V0cHV0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KG91dHB1dFNweS5jYWxscy5jb3VudCgpKS50b0JlKDIpO1xuICAgIGV4cGVjdChvdXRwdXRTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwidGVzdFwiLCBMb2dMZXZlbC53YXJuaW5nLCBcIndcIik7XG4gICAgZXhwZWN0KG91dHB1dFNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXCJ0ZXN0XCIsIExvZ0xldmVsLmVycm9yLCBcImVcIiwgeyBlcnJvcjogdHJ1ZSB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==