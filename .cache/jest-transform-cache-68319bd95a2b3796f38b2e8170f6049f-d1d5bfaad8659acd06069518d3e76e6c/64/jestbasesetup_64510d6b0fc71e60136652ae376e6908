5222d1ab75a0098c7f9d84dd36b560a6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import 'document-register-element';
require("jest-preset-angular/setup-jest"); // commented out due to issue in latest jest-preset-angular
require("@angular/localize/init"); // https://github.com/just-jeb/angular-builders/issues/678#issuecomment-755903805
// require('dotenv').config();
Error.stackTraceLimit = 2;
const CI = process.env["CI"] === "true";
/**
 * GLOBAL MOCKS
 */
Object.defineProperty(window, "CSS", { value: null });
Object.defineProperty(document, "doctype", {
    value: "<!DOCTYPE html>",
});
Object.defineProperty(window, "getComputedStyle", {
    value: () => ({
        display: "none",
        appearance: ["-webkit-appearance"],
    }),
});
Object.defineProperty(window.navigator, "userAgent", ((value) => ({
    get() {
        return value;
    },
    set(v) {
        value = v;
    },
}))(window.navigator["userAgent"]));
if (CI) {
    const consoleMethods = ["trace", "debug", "warn", "log", "group", "groupCollapsed"];
    consoleMethods.forEach((methodName) => {
        jest.spyOn(global.console, methodName).mockImplementation(() => jest.fn());
    });
}
// https://github.com/angular/angular/issues/20827#issuecomment-394487432
window["__zone_symbol__supportWaitUnResolvedChainedPromise"] = true;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2wua3V6ZW5rby9QRVJTT05BTC9uZy1zdGFydC9qZXN0LmJhc2Uuc2V0dXAudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBc0M7QUFDdEMsMENBQXdDLENBQUMsMkRBQTJEO0FBQ3BHLGtDQUFnQyxDQUFDLGlGQUFpRjtBQUVsSCw4QkFBOEI7QUFDOUIsS0FBSyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7QUFDMUIsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxNQUFNLENBQUM7QUFFeEM7O0dBRUc7QUFFSCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN0RCxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUU7SUFDekMsS0FBSyxFQUFFLGlCQUFpQjtDQUN6QixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsRUFBRTtJQUNoRCxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNaLE9BQU8sRUFBRSxNQUFNO1FBQ2YsVUFBVSxFQUFFLENBQUMsb0JBQW9CLENBQUM7S0FDbkMsQ0FBQztDQUNILENBQUMsQ0FBQztBQUNILE1BQU0sQ0FBQyxjQUFjLENBQ25CLE1BQU0sQ0FBQyxTQUFTLEVBQ2hCLFdBQVcsRUFDWCxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1gsR0FBRztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELEdBQUcsQ0FBQyxDQUFTO1FBQ1gsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7Q0FDRixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQ25DLENBQUM7QUFFRixJQUFJLEVBQUUsRUFBRTtJQUNOLE1BQU0sY0FBYyxHQUFhLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTlGLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFrQixFQUFFLEVBQUU7UUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQWlCLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNwRixDQUFDLENBQUMsQ0FBQztDQUNKO0FBRUQseUVBQXlFO0FBQ3hFLE1BQWMsQ0FBQyxvREFBb0QsQ0FBQyxHQUFHLElBQUksQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvbC5rdXplbmtvL1BFUlNPTkFML25nLXN0YXJ0L2plc3QuYmFzZS5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgJ2RvY3VtZW50LXJlZ2lzdGVyLWVsZW1lbnQnO1xuaW1wb3J0IFwiamVzdC1wcmVzZXQtYW5ndWxhci9zZXR1cC1qZXN0XCI7IC8vIGNvbW1lbnRlZCBvdXQgZHVlIHRvIGlzc3VlIGluIGxhdGVzdCBqZXN0LXByZXNldC1hbmd1bGFyXG5pbXBvcnQgXCJAYW5ndWxhci9sb2NhbGl6ZS9pbml0XCI7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qdXN0LWplYi9hbmd1bGFyLWJ1aWxkZXJzL2lzc3Vlcy82NzgjaXNzdWVjb21tZW50LTc1NTkwMzgwNVxuXG4vLyByZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcbkVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IDI7XG5jb25zdCBDSSA9IHByb2Nlc3MuZW52W1wiQ0lcIl0gPT09IFwidHJ1ZVwiO1xuXG4vKipcbiAqIEdMT0JBTCBNT0NLU1xuICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csIFwiQ1NTXCIsIHsgdmFsdWU6IG51bGwgfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQsIFwiZG9jdHlwZVwiLCB7XG4gIHZhbHVlOiBcIjwhRE9DVFlQRSBodG1sPlwiLFxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csIFwiZ2V0Q29tcHV0ZWRTdHlsZVwiLCB7XG4gIHZhbHVlOiAoKSA9PiAoe1xuICAgIGRpc3BsYXk6IFwibm9uZVwiLFxuICAgIGFwcGVhcmFuY2U6IFtcIi13ZWJraXQtYXBwZWFyYW5jZVwiXSxcbiAgfSksXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgd2luZG93Lm5hdmlnYXRvcixcbiAgXCJ1c2VyQWdlbnRcIixcbiAgKCh2YWx1ZSkgPT4gKHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQodjogc3RyaW5nKSB7XG4gICAgICB2YWx1ZSA9IHY7XG4gICAgfSxcbiAgfSkpKHdpbmRvdy5uYXZpZ2F0b3JbXCJ1c2VyQWdlbnRcIl0pLFxuKTtcblxuaWYgKENJKSB7XG4gIGNvbnN0IGNvbnNvbGVNZXRob2RzOiBzdHJpbmdbXSA9IFtcInRyYWNlXCIsIFwiZGVidWdcIiwgXCJ3YXJuXCIsIFwibG9nXCIsIFwiZ3JvdXBcIiwgXCJncm91cENvbGxhcHNlZFwiXTtcblxuICBjb25zb2xlTWV0aG9kcy5mb3JFYWNoKChtZXRob2ROYW1lOiBzdHJpbmcpID0+IHtcbiAgICBqZXN0LnNweU9uKGdsb2JhbC5jb25zb2xlLCBtZXRob2ROYW1lIGFzIGFueSkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IGplc3QuZm4oKSk7XG4gIH0pO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMDgyNyNpc3N1ZWNvbW1lbnQtMzk0NDg3NDMyXG4od2luZG93IGFzIGFueSlbXCJfX3pvbmVfc3ltYm9sX19zdXBwb3J0V2FpdFVuUmVzb2x2ZWRDaGFpbmVkUHJvbWlzZVwiXSA9IHRydWU7XG4iXSwidmVyc2lvbiI6M30=