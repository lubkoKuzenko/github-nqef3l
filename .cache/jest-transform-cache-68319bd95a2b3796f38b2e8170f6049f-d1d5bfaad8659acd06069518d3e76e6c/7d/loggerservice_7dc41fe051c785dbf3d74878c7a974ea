3fcd430c6e3cb4907e20dd90969641c0
"use strict";
/* eslint no-console: 0 no-shadow: 0 */

/**
 * Simple logger system with the possibility of registering custom outputs.
 *
 * 4 different log levels are provided, with corresponding methods:
 * - debug   : for debug information
 * - info    : for informative status of the application (success, ...)
 * - warning : for non-critical errors that do not prevent normal application behavior
 * - error   : for critical errors that prevent normal application behavior
 *
 * Example usage:
 * ```
 * import { Logger } from 'app/core/logger.service';
 *
 * const log = new Logger('myFile');
 * ...
 * log.debug('something happened');
 * ```
 *
 * To disable debug and info logs in production, add this snippet to your root component:
 * ```
 * export class AppComponent implements OnInit {
 *   ngOnInit() {
 *     if (environment.production) {
 *       Logger.enableProductionMode();
 *     }
 *     ...
 *   }
 * }
 *
 * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.
 */

/* istanbul ignore next */
function cov_2fzg5ivyr8() {
  var path = "/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/logger.service.ts";
  var hash = "719f65653d261a7200ba6d4f59347d393f042d03";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/logger.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 34,
          column: 0
        },
        end: {
          line: 34,
          column: 62
        }
      },
      "1": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 43
        }
      },
      "2": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 47,
          column: 59
        }
      },
      "3": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "4": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 46
        }
      },
      "5": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 50
        }
      },
      "6": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "7": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 46
        }
      },
      "8": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 29
        }
      },
      "9": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "10": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "11": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 55
        }
      },
      "12": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "13": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 57
        }
      },
      "14": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "15": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 89,
          column: 89
        }
      },
      "16": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 37
        }
      },
      "17": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 103
        }
      },
      "18": {
        start: {
          line: 91,
          column: 47
        },
        end: {
          line: 91,
          column: 101
        }
      },
      "19": {
        start: {
          line: 95,
          column: 0
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "20": {
        start: {
          line: 100,
          column: 0
        },
        end: {
          line: 100,
          column: 30
        }
      },
      "21": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 104,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 41,
            column: 1
          },
          end: {
            line: 41,
            column: 2
          }
        },
        loc: {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 41
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 24
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 49
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 22
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 63
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 21
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 22
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 84
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 30
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 87
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 91,
            column: 35
          },
          end: {
            line: 91,
            column: 36
          }
        },
        loc: {
          start: {
            line: 91,
            column: 47
          },
          end: {
            line: 91,
            column: 101
          }
        },
        line: 91
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 47,
            column: 14
          },
          end: {
            line: 47,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 14
          },
          end: {
            line: 47,
            column: 30
          }
        }, {
          start: {
            line: 47,
            column: 35
          },
          end: {
            line: 47,
            column: 56
          }
        }],
        line: 47
      },
      "1": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "2": {
        loc: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 38
          },
          end: {
            line: 89,
            column: 79
          }
        }, {
          start: {
            line: 89,
            column: 82
          },
          end: {
            line: 89,
            column: 89
          }
        }],
        line: 89
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/logger.service.ts",
      mappings: ";AAAA,uCAAuC;AACvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;;;AAEH;;;GAGG;AACH,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,qCAAO,CAAA;IACP,yCAAK,CAAA;IACL,6CAAO,CAAA;IACP,uCAAI,CAAA;IACJ,yCAAK,CAAA;AACP,CAAC,EANW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAMnB;AAOD,MAAa,MAAM;IAYjB,YAAoB,MAAe;QAAf,WAAM,GAAN,MAAM,CAAS;IAAG,CAAC;IAEvC;;;OAGG;IACH,MAAM,CAAC,oBAAoB;QACzB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,GAAG,OAAc;QACrB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,GAAG,OAAc;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACH,IAAI,CAAC,GAAG,OAAc;QACpB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,GAAG,OAAc;QACrB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAEO,GAAG,CAAC,IAA8B,EAAE,KAAe,EAAE,OAAc;QACzE,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,EAAE;YACzB,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YAC9E,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;SAC5F;IACH,CAAC;;AA5DH,wBA6DC;AA5DC;;;GAGG;AACI,YAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;AAE9B;;GAEG;AACI,cAAO,GAAgB,EAAE,CAAC",
      names: [],
      sources: ["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/logger.service.ts"],
      sourcesContent: ["/* eslint no-console: 0 no-shadow: 0 */\n/**\n * Simple logger system with the possibility of registering custom outputs.\n *\n * 4 different log levels are provided, with corresponding methods:\n * - debug   : for debug information\n * - info    : for informative status of the application (success, ...)\n * - warning : for non-critical errors that do not prevent normal application behavior\n * - error   : for critical errors that prevent normal application behavior\n *\n * Example usage:\n * ```\n * import { Logger } from 'app/core/logger.service';\n *\n * const log = new Logger('myFile');\n * ...\n * log.debug('something happened');\n * ```\n *\n * To disable debug and info logs in production, add this snippet to your root component:\n * ```\n * export class AppComponent implements OnInit {\n *   ngOnInit() {\n *     if (environment.production) {\n *       Logger.enableProductionMode();\n *     }\n *     ...\n *   }\n * }\n *\n * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.\n */\n\n/**\n * The possible log levels.\n * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.\n */\nexport enum LogLevel {\n  off = 0,\n  error,\n  warning,\n  info,\n  debug,\n}\n\n/**\n * Log output handler function.\n */\nexport type LogOutput = (source: string | undefined, level: LogLevel, ...objects: any[]) => void;\n\nexport class Logger {\n  /**\n   * Current logging level.\n   * Set it to LogLevel.OFF to disable logs completely.\n   */\n  static level = LogLevel.debug;\n\n  /**\n   * Additional log outputs.\n   */\n  static outputs: LogOutput[] = [];\n\n  constructor(private source?: string) {}\n\n  /**\n   * Enables production mode.\n   * Sets logging level to LogLevel.warning.\n   */\n  static enableProductionMode() {\n    Logger.level = LogLevel.warning;\n  }\n\n  /**\n   * Logs messages or objects  with the debug level.\n   * Works the same as console.log().\n   */\n  debug(...objects: any[]) {\n    this.log(console.log, LogLevel.debug, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the info level.\n   * Works the same as console.log().\n   */\n  info(...objects: any[]) {\n    this.log(console.info, LogLevel.info, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the warning level.\n   * Works the same as console.log().\n   */\n  warn(...objects: any[]) {\n    this.log(console.warn, LogLevel.warning, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the error level.\n   * Works the same as console.log().\n   */\n  error(...objects: any[]) {\n    this.log(console.error, LogLevel.error, objects);\n  }\n\n  private log(func: (...args: any[]) => void, level: LogLevel, objects: any[]) {\n    if (level <= Logger.level) {\n      const log = this.source ? [\"[\" + this.source + \"]\"].concat(objects) : objects;\n      func.apply(console, log);\n      Logger.outputs.forEach((output) => output.apply(output, [this.source, level, ...objects]));\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "719f65653d261a7200ba6d4f59347d393f042d03"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2fzg5ivyr8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_2fzg5ivyr8();
cov_2fzg5ivyr8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_2fzg5ivyr8().s[1]++;
exports.Logger = exports.LogLevel = void 0;
/**
 * The possible log levels.
 * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.
 */

var LogLevel;

/* istanbul ignore next */
cov_2fzg5ivyr8().s[2]++;

(function (LogLevel) {
  /* istanbul ignore next */
  cov_2fzg5ivyr8().f[0]++;
  cov_2fzg5ivyr8().s[3]++;
  LogLevel[LogLevel["off"] = 0] = "off";

  /* istanbul ignore next */
  cov_2fzg5ivyr8().s[4]++;
  LogLevel[LogLevel["error"] = 1] = "error";

  /* istanbul ignore next */
  cov_2fzg5ivyr8().s[5]++;
  LogLevel[LogLevel["warning"] = 2] = "warning";

  /* istanbul ignore next */
  cov_2fzg5ivyr8().s[6]++;
  LogLevel[LogLevel["info"] = 3] = "info";

  /* istanbul ignore next */
  cov_2fzg5ivyr8().s[7]++;
  LogLevel[LogLevel["debug"] = 4] = "debug";
})(LogLevel =
/* istanbul ignore next */
(cov_2fzg5ivyr8().b[0][0]++, exports.LogLevel) ||
/* istanbul ignore next */
(cov_2fzg5ivyr8().b[0][1]++, exports.LogLevel = {}));

class Logger {
  constructor(source) {
    /* istanbul ignore next */
    cov_2fzg5ivyr8().f[1]++;
    cov_2fzg5ivyr8().s[8]++;
    this.source = source;
  }
  /**
   * Enables production mode.
   * Sets logging level to LogLevel.warning.
   */


  static enableProductionMode() {
    /* istanbul ignore next */
    cov_2fzg5ivyr8().f[2]++;
    cov_2fzg5ivyr8().s[9]++;
    Logger.level = LogLevel.warning;
  }
  /**
   * Logs messages or objects  with the debug level.
   * Works the same as console.log().
   */


  debug(...objects) {
    /* istanbul ignore next */
    cov_2fzg5ivyr8().f[3]++;
    cov_2fzg5ivyr8().s[10]++;
    this.log(console.log, LogLevel.debug, objects);
  }
  /**
   * Logs messages or objects  with the info level.
   * Works the same as console.log().
   */


  info(...objects) {
    /* istanbul ignore next */
    cov_2fzg5ivyr8().f[4]++;
    cov_2fzg5ivyr8().s[11]++;
    this.log(console.info, LogLevel.info, objects);
  }
  /**
   * Logs messages or objects  with the warning level.
   * Works the same as console.log().
   */


  warn(...objects) {
    /* istanbul ignore next */
    cov_2fzg5ivyr8().f[5]++;
    cov_2fzg5ivyr8().s[12]++;
    this.log(console.warn, LogLevel.warning, objects);
  }
  /**
   * Logs messages or objects  with the error level.
   * Works the same as console.log().
   */


  error(...objects) {
    /* istanbul ignore next */
    cov_2fzg5ivyr8().f[6]++;
    cov_2fzg5ivyr8().s[13]++;
    this.log(console.error, LogLevel.error, objects);
  }

  log(func, level, objects) {
    /* istanbul ignore next */
    cov_2fzg5ivyr8().f[7]++;
    cov_2fzg5ivyr8().s[14]++;

    if (level <= Logger.level) {
      /* istanbul ignore next */
      cov_2fzg5ivyr8().b[1][0]++;
      const log =
      /* istanbul ignore next */
      (cov_2fzg5ivyr8().s[15]++, this.source ?
      /* istanbul ignore next */
      (cov_2fzg5ivyr8().b[2][0]++, ["[" + this.source + "]"].concat(objects)) :
      /* istanbul ignore next */
      (cov_2fzg5ivyr8().b[2][1]++, objects));

      /* istanbul ignore next */
      cov_2fzg5ivyr8().s[16]++;
      func.apply(console, log);

      /* istanbul ignore next */
      cov_2fzg5ivyr8().s[17]++;
      Logger.outputs.forEach(output => {
        /* istanbul ignore next */
        cov_2fzg5ivyr8().f[8]++;
        cov_2fzg5ivyr8().s[18]++;
        return output.apply(output, [this.source, level, ...objects]);
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fzg5ivyr8().b[1][1]++;
    }
  }

}

/* istanbul ignore next */
cov_2fzg5ivyr8().s[19]++;
exports.Logger = Logger;
/**
 * Current logging level.
 * Set it to LogLevel.OFF to disable logs completely.
 */

/* istanbul ignore next */
cov_2fzg5ivyr8().s[20]++;
Logger.level = LogLevel.debug;
/**
 * Additional log outputs.
 */

/* istanbul ignore next */
cov_2fzg5ivyr8().s[21]++;
Logger.outputs = [];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sLmt1emVua28vUEVSU09OQUwvbmctc3RhcnQvc3JjL2FwcC9AY29yZS9zZXJ2aWNlcy9sb2dnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUg7OztBQUdHOztBQUNILElBQVksUUFBWjs7Ozs7QUFBQSxDQUFBLFVBQVksUUFBWixFQUFvQjtBQUFBO0FBQUE7QUFBQTtBQUNsQixFQUFBLFFBQUEsQ0FBQSxRQUFBLENB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LEdBQUEsTUFBQTtBQUNFOzs7QUFHRzs7OztBQUNJLE1BQUEsQ0FBQSxLQUFBLEdBQVEsUUFBUSxDQUFDLEtBQWpCO0FBRVA7O0FBRUc7Ozs7QUFDSSxNQUFBLENBQUEsT0FBQSxHQUF1QixFQUF2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1jb25zb2xlOiAwIG5vLXNoYWRvdzogMCAqL1xuLyoqXG4gKiBTaW1wbGUgbG9nZ2VyIHN5c3RlbSB3aXRoIHRoZSBwb3NzaWJpbGl0eSBvZiByZWdpc3RlcmluZyBjdXN0b20gb3V0cHV0cy5cbiAqXG4gKiA0IGRpZmZlcmVudCBsb2cgbGV2ZWxzIGFyZSBwcm92aWRlZCwgd2l0aCBjb3JyZXNwb25kaW5nIG1ldGhvZHM6XG4gKiAtIGRlYnVnICAgOiBmb3IgZGVidWcgaW5mb3JtYXRpb25cbiAqIC0gaW5mbyAgICA6IGZvciBpbmZvcm1hdGl2ZSBzdGF0dXMgb2YgdGhlIGFwcGxpY2F0aW9uIChzdWNjZXNzLCAuLi4pXG4gKiAtIHdhcm5pbmcgOiBmb3Igbm9uLWNyaXRpY2FsIGVycm9ycyB0aGF0IGRvIG5vdCBwcmV2ZW50IG5vcm1hbCBhcHBsaWNhdGlvbiBiZWhhdmlvclxuICogLSBlcnJvciAgIDogZm9yIGNyaXRpY2FsIGVycm9ycyB0aGF0IHByZXZlbnQgbm9ybWFsIGFwcGxpY2F0aW9uIGJlaGF2aW9yXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqIGBgYFxuICogaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnYXBwL2NvcmUvbG9nZ2VyLnNlcnZpY2UnO1xuICpcbiAqIGNvbnN0IGxvZyA9IG5ldyBMb2dnZXIoJ215RmlsZScpO1xuICogLi4uXG4gKiBsb2cuZGVidWcoJ3NvbWV0aGluZyBoYXBwZW5lZCcpO1xuICogYGBgXG4gKlxuICogVG8gZGlzYWJsZSBkZWJ1ZyBhbmQgaW5mbyBsb2dzIGluIHByb2R1Y3Rpb24sIGFkZCB0aGlzIHNuaXBwZXQgdG8geW91ciByb290IGNvbXBvbmVudDpcbiAqIGBgYFxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gKiAgIG5nT25Jbml0KCkge1xuICogICAgIGlmIChlbnZpcm9ubWVudC5wcm9kdWN0aW9uKSB7XG4gKiAgICAgICBMb2dnZXIuZW5hYmxlUHJvZHVjdGlvbk1vZGUoKTtcbiAqICAgICB9XG4gKiAgICAgLi4uXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBwcm9jZXNzIGxvZ3MgdGhyb3VnaCBvdGhlciBvdXRwdXRzIHRoYW4gY29uc29sZSwgeW91IGNhbiBhZGQgTG9nT3V0cHV0IGZ1bmN0aW9ucyB0byBMb2dnZXIub3V0cHV0cy5cbiAqL1xuXG4vKipcbiAqIFRoZSBwb3NzaWJsZSBsb2cgbGV2ZWxzLlxuICogTG9nTGV2ZWwuT2ZmIGlzIG5ldmVyIGVtaXR0ZWQgYW5kIG9ubHkgdXNlZCB3aXRoIExvZ2dlci5sZXZlbCBwcm9wZXJ0eSB0byBkaXNhYmxlIGxvZ3MuXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgb2ZmID0gMCxcbiAgZXJyb3IsXG4gIHdhcm5pbmcsXG4gIGluZm8sXG4gIGRlYnVnLFxufVxuXG4vKipcbiAqIExvZyBvdXRwdXQgaGFuZGxlciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgTG9nT3V0cHV0ID0gKHNvdXJjZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBsZXZlbDogTG9nTGV2ZWwsIC4uLm9iamVjdHM6IGFueVtdKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgLyoqXG4gICAqIEN1cnJlbnQgbG9nZ2luZyBsZXZlbC5cbiAgICogU2V0IGl0IHRvIExvZ0xldmVsLk9GRiB0byBkaXNhYmxlIGxvZ3MgY29tcGxldGVseS5cbiAgICovXG4gIHN0YXRpYyBsZXZlbCA9IExvZ0xldmVsLmRlYnVnO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGxvZyBvdXRwdXRzLlxuICAgKi9cbiAgc3RhdGljIG91dHB1dHM6IExvZ091dHB1dFtdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzb3VyY2U/OiBzdHJpbmcpIHt9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgcHJvZHVjdGlvbiBtb2RlLlxuICAgKiBTZXRzIGxvZ2dpbmcgbGV2ZWwgdG8gTG9nTGV2ZWwud2FybmluZy5cbiAgICovXG4gIHN0YXRpYyBlbmFibGVQcm9kdWN0aW9uTW9kZSgpIHtcbiAgICBMb2dnZXIubGV2ZWwgPSBMb2dMZXZlbC53YXJuaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgbWVzc2FnZXMgb3Igb2JqZWN0cyAgd2l0aCB0aGUgZGVidWcgbGV2ZWwuXG4gICAqIFdvcmtzIHRoZSBzYW1lIGFzIGNvbnNvbGUubG9nKCkuXG4gICAqL1xuICBkZWJ1ZyguLi5vYmplY3RzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKGNvbnNvbGUubG9nLCBMb2dMZXZlbC5kZWJ1Zywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBtZXNzYWdlcyBvciBvYmplY3RzICB3aXRoIHRoZSBpbmZvIGxldmVsLlxuICAgKiBXb3JrcyB0aGUgc2FtZSBhcyBjb25zb2xlLmxvZygpLlxuICAgKi9cbiAgaW5mbyguLi5vYmplY3RzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKGNvbnNvbGUuaW5mbywgTG9nTGV2ZWwuaW5mbywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBtZXNzYWdlcyBvciBvYmplY3RzICB3aXRoIHRoZSB3YXJuaW5nIGxldmVsLlxuICAgKiBXb3JrcyB0aGUgc2FtZSBhcyBjb25zb2xlLmxvZygpLlxuICAgKi9cbiAgd2FybiguLi5vYmplY3RzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKGNvbnNvbGUud2FybiwgTG9nTGV2ZWwud2FybmluZywgb2JqZWN0cyk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBtZXNzYWdlcyBvciBvYmplY3RzICB3aXRoIHRoZSBlcnJvciBsZXZlbC5cbiAgICogV29ya3MgdGhlIHNhbWUgYXMgY29uc29sZS5sb2coKS5cbiAgICovXG4gIGVycm9yKC4uLm9iamVjdHM6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coY29uc29sZS5lcnJvciwgTG9nTGV2ZWwuZXJyb3IsIG9iamVjdHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2coZnVuYzogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkLCBsZXZlbDogTG9nTGV2ZWwsIG9iamVjdHM6IGFueVtdKSB7XG4gICAgaWYgKGxldmVsIDw9IExvZ2dlci5sZXZlbCkge1xuICAgICAgY29uc3QgbG9nID0gdGhpcy5zb3VyY2UgPyBbXCJbXCIgKyB0aGlzLnNvdXJjZSArIFwiXVwiXS5jb25jYXQob2JqZWN0cykgOiBvYmplY3RzO1xuICAgICAgZnVuYy5hcHBseShjb25zb2xlLCBsb2cpO1xuICAgICAgTG9nZ2VyLm91dHB1dHMuZm9yRWFjaCgob3V0cHV0KSA9PiBvdXRwdXQuYXBwbHkob3V0cHV0LCBbdGhpcy5zb3VyY2UsIGxldmVsLCAuLi5vYmplY3RzXSkpO1xuICAgIH1cbiAgfVxufVxuIl19