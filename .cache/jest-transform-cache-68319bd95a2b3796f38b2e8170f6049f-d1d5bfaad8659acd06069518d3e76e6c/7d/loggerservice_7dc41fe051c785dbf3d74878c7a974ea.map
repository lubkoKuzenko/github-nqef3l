{"version":3,"sources":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/logger.service.ts"],"names":[],"mappingsoB;AAAA;AAAA;AAAA;AAClB,EAAA,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;;AADkB;AAAA;AAElB,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;;AAFkB;AAAA;AAGlB,EAAA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;;AAHkB;AAAA;AAIlB,EAAA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;;AAJkB;AAAA;AAKlB,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACD,CAND,EAAY,QAAQ;AAAR;AAAA,6BAAA,OAAA,CAAA,QAAA;AAAA;AAAA,6BAAA,OAAA,CAAA,QAAA,GAAQ,EAAR,CAAZ;;AAaA,MAAa,MAAb,CAAmB;AAYjB,EAAA,WAAA,CAAoB,MAApB,EAAmC;AAAA;AAAA;AAAA;AAAf,SAAA,MAAA,GAAA,MAAA;AAAmB;AAEvC;;;AAGG;;;AACH,SAAO,oBAAP,GAA2B;AAAA;AAAA;AAAA;AACzB,IAAA,MAAM,CAAC,KAAP,GAAe,QAAQ,CAAC,OAAxB;AACD;AAED;;;AAGG;;;AACH,EAAA,KAAK,CAAC,GAAG,OAAJ,EAAkB;AAAA;AAAA;AAAA;AACrB,SAAK,GAAL,CAAS,OAAO,CAAC,GAAjB,EAAsB,QAAQ,CAAC,KAA/B,EAAsC,OAAtC;AACD;AAED;;;AAGG;;;AACH,EAAA,IAAI,CAAC,GAAG,OAAJ,EAAkB;AAAA;AAAA;AAAA;AACpB,SAAK,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,QAAQ,CAAC,IAAhC,EAAsC,OAAtC;AACD;AAED;;;AAGG;;;AACH,EAAA,IAAI,CAAC,GAAG,OAAJ,EAAkB;AAAA;AAAA;AAAA;AACpB,SAAK,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,QAAQ,CAAC,OAAhC,EAAyC,OAAzC;AACD;AAED;;;AAGG;;;AACH,EAAA,KAAK,CAAC,GAAG,OAAJ,EAAkB;AAAA;AAAA;AAAA;AACrB,SAAK,GAAL,CAAS,OAAO,CAAC,KAAjB,EAAwB,QAAQ,CAAC,KAAjC,EAAwC,OAAxC;AACD;;AAEO,EAAA,GAAG,CAAC,IAAD,EAAiC,KAAjC,EAAkD,OAAlD,EAAgE;AAAA;AAAA;AAAA;;AACzE,QAAI,KAAK,IAAI,MAAM,CAAC,KAApB,EAA2B;AAAA;AAAA;AACzB,YAAM,GAAG;AAAA;AAAA,iCAAG,KAAK,MAAL;AAAA;AAAA,mCAAc,CAAC,MAAM,KAAK,MAAX,GAAoB,GAArB,EAA0B,MAA1B,CAAiC,OAAjC,CAAd;AAAA;AAAA,mCAA0D,OAA1D,CAAH,CAAT;;AADyB;AAAA;AAEzB,MAAA,IAAI,CAAC,KAAL,CAAW,OAAX,EAAoB,GAApB;;AAFyB;AAAA;AAGzB,MAAA,MAAM,CAAC,OAAP,CAAe,OAAf,CAAwB,MAAD,IAAY;AAAA;AAAA;AAAA;AAAA,eAAA,MAAM,CAAC,KAAP,CAAa,MAAb,EAAqB,CAAC,KAAK,MAAN,EAAc,KAAd,EAAqB,GAAG,OAAxB,CAArB;AAAsD,OAAzF;AACD,KAJD;AAAA;AAAA;AAAA;AAAA;AAKD;;AA5DgB;;;;AAAnB,OAAA,CAAA,MAAA,GAAA,MAAA;AACE;;;AAGG;;;;AACI,MAAA,CAAA,KAAA,GAAQ,QAAQ,CAAC,KAAjB;AAEP;;AAEG;;;;AACI,MAAA,CAAA,OAAA,GAAuB,EAAvB","sourcesContent":["/* eslint no-console: 0 no-shadow: 0 */\n/**\n * Simple logger system with the possibility of registering custom outputs.\n *\n * 4 different log levels are provided, with corresponding methods:\n * - debug   : for debug information\n * - info    : for informative status of the application (success, ...)\n * - warning : for non-critical errors that do not prevent normal application behavior\n * - error   : for critical errors that prevent normal application behavior\n *\n * Example usage:\n * ```\n * import { Logger } from 'app/core/logger.service';\n *\n * const log = new Logger('myFile');\n * ...\n * log.debug('something happened');\n * ```\n *\n * To disable debug and info logs in production, add this snippet to your root component:\n * ```\n * export class AppComponent implements OnInit {\n *   ngOnInit() {\n *     if (environment.production) {\n *       Logger.enableProductionMode();\n *     }\n *     ...\n *   }\n * }\n *\n * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.\n */\n\n/**\n * The possible log levels.\n * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.\n */\nexport enum LogLevel {\n  off = 0,\n  error,\n  warning,\n  info,\n  debug,\n}\n\n/**\n * Log output handler function.\n */\nexport type LogOutput = (source: string | undefined, level: LogLevel, ...objects: any[]) => void;\n\nexport class Logger {\n  /**\n   * Current logging level.\n   * Set it to LogLevel.OFF to disable logs completely.\n   */\n  static level = LogLevel.debug;\n\n  /**\n   * Additional log outputs.\n   */\n  static outputs: LogOutput[] = [];\n\n  constructor(private source?: string) {}\n\n  /**\n   * Enables production mode.\n   * Sets logging level to LogLevel.warning.\n   */\n  static enableProductionMode() {\n    Logger.level = LogLevel.warning;\n  }\n\n  /**\n   * Logs messages or objects  with the debug level.\n   * Works the same as console.log().\n   */\n  debug(...objects: any[]) {\n    this.log(console.log, LogLevel.debug, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the info level.\n   * Works the same as console.log().\n   */\n  info(...objects: any[]) {\n    this.log(console.info, LogLevel.info, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the warning level.\n   * Works the same as console.log().\n   */\n  warn(...objects: any[]) {\n    this.log(console.warn, LogLevel.warning, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the error level.\n   * Works the same as console.log().\n   */\n  error(...objects: any[]) {\n    this.log(console.error, LogLevel.error, objects);\n  }\n\n  private log(func: (...args: any[]) => void, level: LogLevel, objects: any[]) {\n    if (level <= Logger.level) {\n      const log = this.source ? [\"[\" + this.source + \"]\"].concat(objects) : objects;\n      func.apply(console, log);\n      Logger.outputs.forEach((output) => output.apply(output, [this.source, level, ...objects]));\n    }\n  }\n}\n"]}