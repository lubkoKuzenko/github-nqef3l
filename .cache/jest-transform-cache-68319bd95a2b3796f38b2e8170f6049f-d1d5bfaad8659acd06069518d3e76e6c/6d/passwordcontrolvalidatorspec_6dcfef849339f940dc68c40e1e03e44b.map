{"file":"/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.spec.ts","mappings":";;AAAA,0CAA6C;AAC7C,6EAAkE;AAElE;;;;;EAKE;AAEF,MAAM,UAAU,GAAG;IACjB,EAAE,SAAS,EAAE,yCAAyC,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;IACjG,EAAE,SAAS,EAAE,qCAAqC,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;IAChG,EAAE,SAAS,EAAE,qCAAqC,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;IAChG,EAAE,SAAS,EAAE,+BAA+B,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;IAC3F,EAAE,SAAS,EAAE,0BAA0B,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE;CAC3E,CAAC;AAEF,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,MAAM,kCAAkC,GAAG,+CAAkB,CAAC,6BAA6B,EAAE,CAAC;IAC9F,MAAM,OAAO,GAAG,IAAI,mBAAW,CAAC,OAAO,CAAC,CAAC;IAEzC,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;QAClD,EAAE,CAAC,iBAAiB,MAAM,aAAa,SAAS,EAAE,EAAE,GAAG,EAAE;YACvD,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACxB,MAAM,CAAC,kCAAkC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.spec.ts"],"sourcesContent":["import { FormControl } from \"@angular/forms\";\nimport { PasswordValidators } from \"./password-control.validator\";\n\n/*\nA minimum of 7 characters\nAt least one UPPERCASE letter\nAt least one lowercase letter\nAt least one number\n*/\n\nconst TEST_CASES = [\n  { test_case: \"string length is less than 7 characters\", value: \"12345\", result: { error: true } },\n  { test_case: \"string do not have UPPERCASE letter\", value: \"12345qwe\", result: { error: true } },\n  { test_case: \"string do not have lowercase letter\", value: \"12345WWW\", result: { error: true } },\n  { test_case: \"string do not have one number\", value: \"qweqweWWW\", result: { error: true } },\n  { test_case: \"string has correct value\", value: \"123qweQW\", result: null },\n];\n\ndescribe(\"PasswordValidators\", () => {\n  const isPasswordInCorrectFormatValidator = PasswordValidators.isValueSatisfyFormatValidator();\n  const control = new FormControl(\"input\");\n\n  TEST_CASES.forEach(({ test_case, value, result }) => {\n    it(`should return ${result} if input ${test_case}`, () => {\n      control.setValue(value);\n      expect(isPasswordInCorrectFormatValidator(control)).toEqual(result);\n    });\n  });\n});\n"],"version":3}