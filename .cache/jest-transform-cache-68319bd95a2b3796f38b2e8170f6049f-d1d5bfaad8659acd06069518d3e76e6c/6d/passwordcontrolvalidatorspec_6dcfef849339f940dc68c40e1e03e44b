93c39e3c129284a7063388c1135fa8f1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const forms_1 = require("@angular/forms");
const password_control_validator_1 = require("./password-control.validator");
/*
A minimum of 7 characters
At least one UPPERCASE letter
At least one lowercase letter
At least one number
*/
const TEST_CASES = [
    { test_case: "string length is less than 7 characters", value: "12345", result: { error: true } },
    { test_case: "string do not have UPPERCASE letter", value: "12345qwe", result: { error: true } },
    { test_case: "string do not have lowercase letter", value: "12345WWW", result: { error: true } },
    { test_case: "string do not have one number", value: "qweqweWWW", result: { error: true } },
    { test_case: "string has correct value", value: "123qweQW", result: null },
];
describe("PasswordValidators", () => {
    const isPasswordInCorrectFormatValidator = password_control_validator_1.PasswordValidators.isValueSatisfyFormatValidator();
    const control = new forms_1.FormControl("input");
    TEST_CASES.forEach(({ test_case, value, result }) => {
        it(`should return ${result} if input ${test_case}`, () => {
            control.setValue(value);
            expect(isPasswordInCorrectFormatValidator(control)).toEqual(result);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2wua3V6ZW5rby9QRVJTT05BTC9uZy1zdGFydC9zcmMvYXBwL3VuaXQtdGVzdHMvZm9ybS12YWxpZGF0b3JzL3Bhc3N3b3JkLWNvbnRyb2wudmFsaWRhdG9yLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQ0FBNkM7QUFDN0MsNkVBQWtFO0FBRWxFOzs7OztFQUtFO0FBRUYsTUFBTSxVQUFVLEdBQUc7SUFDakIsRUFBRSxTQUFTLEVBQUUseUNBQXlDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDakcsRUFBRSxTQUFTLEVBQUUscUNBQXFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDaEcsRUFBRSxTQUFTLEVBQUUscUNBQXFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDaEcsRUFBRSxTQUFTLEVBQUUsK0JBQStCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDM0YsRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO0NBQzNFLENBQUM7QUFFRixRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLE1BQU0sa0NBQWtDLEdBQUcsK0NBQWtCLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztJQUM5RixNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFekMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1FBQ2xELEVBQUUsQ0FBQyxpQkFBaUIsTUFBTSxhQUFhLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUN2RCxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2wua3V6ZW5rby9QRVJTT05BTC9uZy1zdGFydC9zcmMvYXBwL3VuaXQtdGVzdHMvZm9ybS12YWxpZGF0b3JzL3Bhc3N3b3JkLWNvbnRyb2wudmFsaWRhdG9yLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IFBhc3N3b3JkVmFsaWRhdG9ycyB9IGZyb20gXCIuL3Bhc3N3b3JkLWNvbnRyb2wudmFsaWRhdG9yXCI7XG5cbi8qXG5BIG1pbmltdW0gb2YgNyBjaGFyYWN0ZXJzXG5BdCBsZWFzdCBvbmUgVVBQRVJDQVNFIGxldHRlclxuQXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXJcbkF0IGxlYXN0IG9uZSBudW1iZXJcbiovXG5cbmNvbnN0IFRFU1RfQ0FTRVMgPSBbXG4gIHsgdGVzdF9jYXNlOiBcInN0cmluZyBsZW5ndGggaXMgbGVzcyB0aGFuIDcgY2hhcmFjdGVyc1wiLCB2YWx1ZTogXCIxMjM0NVwiLCByZXN1bHQ6IHsgZXJyb3I6IHRydWUgfSB9LFxuICB7IHRlc3RfY2FzZTogXCJzdHJpbmcgZG8gbm90IGhhdmUgVVBQRVJDQVNFIGxldHRlclwiLCB2YWx1ZTogXCIxMjM0NXF3ZVwiLCByZXN1bHQ6IHsgZXJyb3I6IHRydWUgfSB9LFxuICB7IHRlc3RfY2FzZTogXCJzdHJpbmcgZG8gbm90IGhhdmUgbG93ZXJjYXNlIGxldHRlclwiLCB2YWx1ZTogXCIxMjM0NVdXV1wiLCByZXN1bHQ6IHsgZXJyb3I6IHRydWUgfSB9LFxuICB7IHRlc3RfY2FzZTogXCJzdHJpbmcgZG8gbm90IGhhdmUgb25lIG51bWJlclwiLCB2YWx1ZTogXCJxd2Vxd2VXV1dcIiwgcmVzdWx0OiB7IGVycm9yOiB0cnVlIH0gfSxcbiAgeyB0ZXN0X2Nhc2U6IFwic3RyaW5nIGhhcyBjb3JyZWN0IHZhbHVlXCIsIHZhbHVlOiBcIjEyM3F3ZVFXXCIsIHJlc3VsdDogbnVsbCB9LFxuXTtcblxuZGVzY3JpYmUoXCJQYXNzd29yZFZhbGlkYXRvcnNcIiwgKCkgPT4ge1xuICBjb25zdCBpc1Bhc3N3b3JkSW5Db3JyZWN0Rm9ybWF0VmFsaWRhdG9yID0gUGFzc3dvcmRWYWxpZGF0b3JzLmlzVmFsdWVTYXRpc2Z5Rm9ybWF0VmFsaWRhdG9yKCk7XG4gIGNvbnN0IGNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woXCJpbnB1dFwiKTtcblxuICBURVNUX0NBU0VTLmZvckVhY2goKHsgdGVzdF9jYXNlLCB2YWx1ZSwgcmVzdWx0IH0pID0+IHtcbiAgICBpdChgc2hvdWxkIHJldHVybiAke3Jlc3VsdH0gaWYgaW5wdXQgJHt0ZXN0X2Nhc2V9YCwgKCkgPT4ge1xuICAgICAgY29udHJvbC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICBleHBlY3QoaXNQYXNzd29yZEluQ29ycmVjdEZvcm1hdFZhbGlkYXRvcihjb250cm9sKSkudG9FcXVhbChyZXN1bHQpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9