[["/Users/l.kuzenko/PERSONAL/ng-start/jest.base.setup.ts",{"fileContent":"// import 'document-register-element';\nimport \"jest-preset-angular/setup-jest\"; // commented out due to issue in latest jest-preset-angular\nimport \"@angular/localize/init\"; // https://github.com/just-jeb/angular-builders/issues/678#issuecomment-755903805\n\n// require('dotenv').config();\nError.stackTraceLimit = 2;\nconst CI = process.env[\"CI\"] === \"true\";\n\n/**\n * GLOBAL MOCKS\n */\n\nObject.defineProperty(window, \"CSS\", { value: null });\nObject.defineProperty(document, \"doctype\", {\n  value: \"<!DOCTYPE html>\",\n});\n\nObject.defineProperty(window, \"getComputedStyle\", {\n  value: () => ({\n    display: \"none\",\n    appearance: [\"-webkit-appearance\"],\n  }),\n});\nObject.defineProperty(\n  window.navigator,\n  \"userAgent\",\n  ((value) => ({\n    get() {\n      return value;\n    },\n    set(v: string) {\n      value = v;\n    },\n  }))(window.navigator[\"userAgent\"]),\n);\n\nif (CI) {\n  const consoleMethods: string[] = [\"trace\", \"debug\", \"warn\", \"log\", \"group\", \"groupCollapsed\"];\n\n  consoleMethods.forEach((methodName: string) => {\n    jest.spyOn(global.console, methodName as any).mockImplementation(() => jest.fn());\n  });\n}\n\n// https://github.com/angular/angular/issues/20827#issuecomment-394487432\n(window as any)[\"__zone_symbol__supportWaitUnResolvedChainedPromise\"] = true;\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/nested-form-service/form-general/form-general.component.ts",{"fileContent":"import { Component, OnInit, Input, ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { FormsService } from \"../../../services/forms.service\";\n\n@Component({\n  selector: \"bb-form-general\",\n  templateUrl: \"./form-general.component.html\",\n  styleUrls: [\"./form-general.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormGeneralComponent implements OnInit {\n  @Input() public parentForm!: FormGroup;\n\n  public form = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n    description: new FormControl(\"\", [Validators.required]),\n  });\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  constructor(public formsService: FormsService) {}\n\n  public ngOnInit() {\n    this.formsService.addGroupToParentForm(this.parentForm, this.form);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/services/forms.service.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/nested-form-service/nested-form.component.ts",{"fileContent":"import { Component, ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Component({\n  selector: \"bb-nested-form\",\n  templateUrl: \"./nested-form.component.html\",\n  styleUrls: [\"./nested-form.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NestedFormComponent {\n  public form = new FormGroup({\n    general: new FormGroup({}),\n    birthDate: new FormGroup({}),\n  });\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  public onSubmit() {\n    if (this.form.valid) {\n      const formValue = this.form.getRawValue();\n      console.log(formValue);\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/nested-form-service/form-birthday/form-birthday.component.ts",{"fileContent":"import { Component, OnInit, Input, ChangeDetectionStrategy } from \"@angular/core\";\n\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { FormsService } from \"../../../services/forms.service\";\n\n@Component({\n  selector: \"bb-form-birthday\",\n  templateUrl: \"./form-birthday.component.html\",\n  styleUrls: [\"./form-birthday.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormBirthdayComponent implements OnInit {\n  @Input() public parentForm!: FormGroup;\n\n  public form = new FormGroup({\n    birthDate: new FormControl(new Date(), [Validators.required]),\n  });\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  constructor(public formsService: FormsService) {}\n\n  public ngOnInit() {\n    this.formsService.addGroupToParentForm(this.parentForm, this.form);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/services/forms.service.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/custom-field-form/counter-input/counter-input.component.ts",{"fileContent":"import {\n  Component,\n  forwardRef,\n  Input,\n  Provider,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges,\n} from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl, NG_VALIDATORS } from \"@angular/forms\";\n\nexport const COUNTER_VALUE_ACCESSOR: Provider = [\n  {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CounterInputComponent),\n    multi: true,\n  },\n  { provide: NG_VALIDATORS, useExisting: forwardRef(() => CounterInputComponent), multi: true },\n];\n\nexport function createCounterRangeValidator(maxValue: number, minValue: number) {\n  return (c: FormControl) => {\n    const err = {\n      rangeError: {\n        given: c.value,\n        max: maxValue || 10,\n        min: minValue || 0,\n      },\n    };\n\n    return c.value > +maxValue || c.value < +minValue ? err : null;\n  };\n}\n\n@Component({\n  selector: \"bb-counter-input\",\n  templateUrl: \"./counter-input.component.html\",\n  styleUrls: [\"./counter-input.component.scss\"],\n  providers: [...COUNTER_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CounterInputComponent implements OnChanges, ControlValueAccessor {\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input(\"counterValue\") _counterValue = 0;\n  @Input() counterRangeMax;\n  @Input() counterRangeMin;\n\n  propagateChange: any = () => {};\n  validateFn: any = () => {};\n\n  get counterValue() {\n    return this._counterValue;\n  }\n\n  set counterValue(val: number) {\n    this._counterValue = val;\n    this.propagateChange(val);\n  }\n\n  public ngOnChanges(inputs: SimpleChanges) {\n    if (inputs.counterRangeMax || inputs.counterRangeMin) {\n      this.validateFn = createCounterRangeValidator(this.counterRangeMax, this.counterRangeMin);\n    }\n  }\n\n  writeValue(value: number) {\n    if (value) {\n      this.counterValue = value;\n    }\n  }\n\n  registerOnChange(fn: () => {}) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched() {}\n\n  increase() {\n    this.counterValue++;\n  }\n\n  decrease() {\n    this.counterValue--;\n  }\n\n  validate(c: FormControl) {\n    return this.validateFn(c);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/basic-form/basic-form.component.ts",{"fileContent":"import { Component, OnInit, Input, ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { getDirtyValues } from \"../../../../utils/getDirtyValuesFromForm\";\nimport { BasicFormValidators } from \"../validators\";\n\n@Component({\n  selector: \"bb-basic-form\",\n  templateUrl: \"./basic-form.component.html\",\n  styleUrls: [\"./basic-form.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BasicFormComponent implements OnInit {\n  @Input() public data;\n\n  public form = new FormGroup(\n    {\n      firstName: new FormControl(\"\", [Validators.required, Validators.maxLength(3)]),\n      lastName: new FormControl(\"\", [Validators.required]),\n    },\n    { validators: BasicFormValidators.fullNameValidator() },\n  );\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  constructor() {}\n\n  public ngOnInit() {\n    this.initializeFormValues(this.data);\n  }\n\n  // reset form\n  public reset() {\n    this.form.reset();\n  }\n\n  // populate form values\n  public initializeFormValues(data: any) {\n    this.form.patchValue({ ...data });\n  }\n\n  // GET form values\n  public onSubmit() {\n    console.log(this.form.getRawValue());\n    console.log(getDirtyValues(this.form));\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/utils/getDirtyValuesFromForm.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/validators/index.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/validators/basic-form.validator.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/custom-field-form/custom-field-form.component.ts",{"fileContent":"import { Component, Input, ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormGroup, FormControl } from \"@angular/forms\";\n\n@Component({\n  selector: \"bb-custom-field-form\",\n  templateUrl: \"./custom-field-form.component.html\",\n  styleUrls: [\"./custom-field-form.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomFieldFormComponent {\n  @Input() public data: { counter: number } = { counter: 7 };\n\n  public minValue = 0;\n  public maxValue = 12;\n\n  public form: FormGroup = new FormGroup({\n    counter: new FormControl(this.data.counter, []),\n  });\n\n  public onSubmit() {\n    if (this.form.valid) {\n      const formValue = this.form.getRawValue();\n      console.log(formValue);\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/nested-form-directive/form-fullname/field-fullname.component.ts",{"fileContent":"import { Component, OnInit, ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormGroup, FormGroupDirective } from \"@angular/forms\";\n\n@Component({\n  selector: \"bb-form-fullname\",\n  templateUrl: \"./field-fullname.component.html\",\n  styleUrls: [\"./field-fullname.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormFullNameComponent implements OnInit {\n  public form!: FormGroup;\n\n  get controls() {\n    return this.form && this.form.controls;\n  }\n\n  constructor(private rootFormGroup: FormGroupDirective) {}\n\n  public ngOnInit() {\n    this.form = this.rootFormGroup.control;\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/nested-form-directive/nested-form-directive.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n  selector: \"bb-nested-form-directive\",\n  templateUrl: \"./nested-form-directive.component.html\",\n  styleUrls: [\"./nested-form-directive.component.scss\"],\n})\nexport class NestedFormDirectiveComponent {\n  public form = new FormGroup({\n    fullname: new FormControl(\"\", [Validators.required]),\n    birthDate: new FormControl(\"\", []),\n  });\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  public onSubmit() {\n    if (this.form.valid) {\n      const formValue = this.form.getRawValue();\n      console.log(formValue);\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/validators/basic-form.validator.ts",{"fileContent":"import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nexport class BasicFormValidators {\n  static fullNameValidator(): ValidatorFn {\n    return (group: AbstractControl): ValidationErrors | null => {\n      const fn = group.get(\"firstName\").value;\n      const ln = group.get(\"lastName\").value;\n\n      return fn && ln ? null : { invalidFullName: true };\n    };\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/components/dynamic-form/dynamic-form.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { FormGroup, FormArray, FormControl, Validators } from \"@angular/forms\";\n\n@Component({\n  selector: \"bb-dynamic-form\",\n  templateUrl: \"./dynamic-form.component.html\",\n  styleUrls: [\"./dynamic-form.component.scss\"],\n})\nexport class DynamicFormComponent {\n  public form: FormGroup = new FormGroup({\n    userName: new FormControl(\"Lyubomyr\", [Validators.required]),\n    timeRanges: new FormArray([]),\n  });\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  get timeRangeControls() {\n    return this.form.get(\"timeRanges\") as FormArray;\n  }\n\n  public addNewTimeRange() {\n    this.timeRangeControls.push(this.singleRange());\n  }\n\n  public deleteTimeRange(i: number) {\n    this.timeRangeControls.removeAt(i);\n  }\n\n  public onSubmit() {\n    console.log(this.form.getRawValue());\n  }\n\n  private singleRange() {\n    return new FormGroup({\n      startDate: new FormControl(\"\", []),\n      endDate: new FormControl(\"\", []),\n    });\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/containers/forms/forms.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { of } from \"rxjs\";\n\n@Component({\n  templateUrl: \"./forms.component.html\",\n  styleUrls: [\"./forms.component.scss\"],\n})\nexport class FormsComponent {\n  public basicForm$ = of({ firstName: \"firstName\", lastName: \"lastName\" });\n  public customFieldForm$ = of({ counter: 2 });\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/forms/services/forms.service.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Injectable()\nexport class FormsService {\n  public addGroupToParentForm(parentForm: FormGroup, group: FormGroup) {\n    for (const [key, control] of Object.entries(group.controls)) {\n      parentForm.addControl(key, control);\n    }\n    group.setParent(parentForm);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/widget-wrapper/widget-wrapper.component.ts",{"fileContent":"import { Component, OnInit, ContentChild } from \"@angular/core\";\nimport { WIDGET_TOKEN } from \"../widget.token\";\nimport { iWidget } from \"../interfaces/widget-interface\";\n\n@Component({\n  selector: \"l9-widget-wrapper\",\n  templateUrl: \"./widget-wrapper.component.html\",\n  styleUrls: [\"./widget-wrapper.component.scss\"],\n})\nexport class WidgetWrapperComponent implements OnInit {\n  @ContentChild(WIDGET_TOKEN as any, { static: true }) public widget: iWidget;\n\n  constructor() {}\n\n  public ngOnInit() {\n    this.widget.load();\n  }\n\n  public onRefresh() {\n    this.widget.refresh();\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/widget.token.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/interfaces/widget-interface.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/widget.token.ts",{"fileContent":"import { InjectionToken } from \"@angular/core\";\nimport { iWidget } from \"./interfaces/widget-interface\";\n\nexport const WIDGET_TOKEN = new InjectionToken<iWidget>(\"Widget\");\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/interfaces/widget-interface.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/widget-one/widget-one.component.ts",{"fileContent":"import { Component, OnInit } from \"@angular/core\";\nimport { iWidget } from \"../interfaces/widget-interface\";\nimport { WIDGET_TOKEN } from \"../widget.token\";\n\n@Component({\n  selector: \"l9-widget-one\",\n  templateUrl: \"./widget-one.component.html\",\n  styleUrls: [\"./widget-one.component.scss\"],\n  providers: [\n    {\n      provide: WIDGET_TOKEN,\n      useExisting: WidgetOneComponent,\n    },\n  ],\n})\nexport class WidgetOneComponent implements iWidget, OnInit {\n  public isRefreshing = false;\n\n  constructor() {}\n\n  public ngOnInit() {}\n\n  public load() {\n    console.log(\"load Data for WidgetOne\");\n  }\n\n  public refresh() {\n    this.isRefreshing = true;\n    setTimeout(() => {\n      this.isRefreshing = false;\n    }, 1000);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/interfaces/widget-interface.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/widget.token.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/widget-two/widget-two.component.ts",{"fileContent":"import { Component, OnInit } from \"@angular/core\";\nimport { iWidget } from \"../interfaces/widget-interface\";\nimport { WIDGET_TOKEN } from \"../widget.token\";\n\n@Component({\n  selector: \"l9-widget-two\",\n  templateUrl: \"./widget-two.component.html\",\n  styleUrls: [\"./widget-two.component.scss\"],\n  providers: [\n    {\n      provide: WIDGET_TOKEN,\n      useExisting: WidgetTwoComponent,\n    },\n  ],\n})\nexport class WidgetTwoComponent implements iWidget, OnInit {\n  public isRefreshing = false;\n\n  constructor() {}\n\n  public ngOnInit() {}\n\n  public load() {\n    console.log(\"load Data for WidgetTwo\");\n  }\n\n  public refresh() {\n    this.isRefreshing = true;\n    setTimeout(() => {\n      this.isRefreshing = false;\n    }, 1000);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/interfaces/widget-interface.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/widget.token.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/bridge/interfaces/widget-interface.ts",{"fileContent":"export interface iWidget {\n  load: () => void;\n  refresh: () => void;\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/patterns/patterns.component.ts",{"fileContent":"import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"l9-patterns\",\n  templateUrl: \"./patterns.component.html\",\n  styleUrls: [\"./patterns.component.scss\"],\n})\nexport class PatternsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/directives/debounce-click.directive.ts",{"fileContent":"import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { ReplaySubject } from \"rxjs\";\nimport { debounceTime } from \"rxjs/operators\";\n\n@Directive({\n  selector: \"[bbDebounceClick]\",\n})\nexport class DebounceClickDirective implements OnInit, OnDestroy {\n  @Input()\n  debounceTime = 500;\n  @Output()\n  debounceClick = new EventEmitter();\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor() {}\n\n  @HostListener(\"click\", [\"$event\"])\n  clickEvent(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.destroyed$.next(true);\n  }\n\n  ngOnInit() {\n    this.destroyed$.pipe(debounceTime(this.debounceTime)).subscribe((e) => this.debounceClick.emit(e));\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.complete();\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/presentational-components/test/test.component.ts",{"fileContent":"import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\n@Component({\n  selector: \"test-example\",\n  template: `\n    <div class=\"border p-3 m-1\">\n      <h6 class=\"title\">Test Components</h6>\n      <span *ngIf=\"isSubTitleVisible\" class=\"sub-title\">sub title</span>\n      <button data-role=\"test-action-button\" (click)=\"onClick()\">click me</button>\n      <button data-role=\"test-action-with-param-button\" (click)=\"onClickWithParam('string param')\">\n        click me with data\n      </button>\n    </div>\n  `,\n})\nexport class TestComponent {\n  @Input() public isSubTitleVisible = false;\n  @Output() public click = new EventEmitter<{ someData: string }>();\n  @Output() public clickWithParam = new EventEmitter<string>();\n\n  public onClick() {\n    this.click.emit({ someData: \"test string\" });\n  }\n\n  public onClickWithParam(event: string) {\n    this.clickWithParam.emit(event);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/pipes/order-by.pipe.ts",{"fileContent":"import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"orderBy\",\n})\nexport class OrderByPipe implements PipeTransform {\n  transform(array: any, field: string): any[] {\n    array.sort((a: any, b: any) => {\n      if (a[field] < b[field]) {\n        return -1;\n      } else if (a[field] > b[field]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    return array;\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/pipes/string-to-number.pipe.ts",{"fileContent":"import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({ name: \"toNumber\" })\nexport class ToNumberPipe implements PipeTransform {\n  transform(value: string | number): number {\n    if (!value) return NaN;\n\n    if (typeof value === \"string\" && value.trim().length === 0) {\n      return NaN;\n    }\n    return Number(value);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.ts",{"fileContent":"import { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nconst pattern = \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}\";\n\nexport class PasswordValidators {\n  static isValueSatisfyFormatValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const reg = new RegExp(pattern);\n      if (control.value && !reg.test(String(control.value))) {\n        return { wrongPasswordFormat: true };\n      }\n\n      return null;\n    };\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/unit-tests.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { PasswordValidators } from \"./form-validators\";\n\n@Component({\n  template: `\n    <h1>Pipes</h1>\n\n    <div>\n      <b>toNumber</b>\n      => {{ \"123\" | toNumber }}\n    </div>\n    <div>\n      <b>orderBy</b>\n      => {{ [{ name: \"Haresh\" }, { name: \"Paresh\" }, { name: \"Amit\" }] | orderBy: \"name\" | json }}\n    </div>\n\n    <h1>Directives</h1>\n    <div>\n      <button [debounceTime]=\"500\" bbDebounceClick (debounceClick)=\"onClick()\">Debounce Click</button>\n    </div>\n\n    <h1>Presentational Component</h1>\n    <test-example [isSubTitleVisible]=\"true\" (click)=\"log($event)\"></test-example>\n    <test-example [isSubTitleVisible]=\"false\" (clickWithParam)=\"log($event)\"></test-example>\n\n    <h1>Form Control Validator</h1>\n    <form [formGroup]=\"form\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <mat-form-field>\n            <mat-label>Name</mat-label>\n            <input matInput type=\"text\" formControlName=\"name\" />\n            <bb-validation-message [control]=\"form.controls.name\"></bb-validation-message>\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-12\">\n          <mat-form-field>\n            <mat-label>Password</mat-label>\n            <input matInput type=\"text\" formControlName=\"password\" />\n            <bb-validation-message [control]=\"form.controls.password\"></bb-validation-message>\n          </mat-form-field>\n        </div>\n      </div>\n    </form>\n  `,\n})\nexport class UnitTestsComponent {\n  public form = new FormGroup({\n    name: new FormControl(\"test\", [Validators.required]),\n    password: new FormControl(\"123\", PasswordValidators.isValueSatisfyFormatValidator()),\n  });\n\n  public onClick() {\n    console.log(\"test\");\n  }\n\n  public log(event: any) {\n    console.log(event);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/index.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-tests/form-validators/password-control.validator.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/components/card-view/card-view.component.ts",{"fileContent":"import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { Card } from \"../../interfaces\";\n\n@Component({\n  selector: \"l9-card-view\",\n  templateUrl: \"./card-view.component.html\",\n  styleUrls: [\"./card-view.component.scss\"],\n})\nexport class CardViewComponent {\n  @Input() cards: Card[] = [];\n\n  @Output() edit = new EventEmitter<Card>();\n  @Output() delete = new EventEmitter<string>();\n\n  public onEdit(card: Card) {\n    this.edit.emit(card);\n  }\n\n  public onDelete(cardId: string) {\n    this.delete.emit(cardId);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/interfaces/index.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/components/card-form/card-form.component.ts",{"fileContent":"import { Component, Inject } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport * as moment from \"moment\";\nimport { Card } from \"../../interfaces\";\n\n@Component({\n  selector: \"l9-card-form\",\n  templateUrl: \"./card-form.component.html\",\n  styleUrls: [\"./card-form.component.scss\"],\n})\nexport class CardFormComponent {\n  public form = new FormGroup({\n    id: new FormControl(null, []),\n    createdAt: new FormControl(\"\", [Validators.required]),\n    title: new FormControl(\"\", [Validators.required]),\n    description: new FormControl(\"\", [Validators.required]),\n  });\n\n  get controls() {\n    return this.form.controls;\n  }\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) private data: { card: Card },\n    private dialogRef: MatDialogRef<CardFormComponent>,\n  ) {}\n\n  ngOnInit() {\n    if (this.data) {\n      this.initializeFormValues(this.data.card);\n    }\n  }\n\n  // populate form values\n  public initializeFormValues(card: Card) {\n    this.form.patchValue({ ...card, createdAt: moment(card.createdAt).format(\"YYYY-MM-DD\") });\n  }\n\n  public submitForm() {\n    if (this.form.value.id === null) [delete this.form.value.id];\n    this.dialogRef.close(this.form.value);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/interfaces/index.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/containers/cards/cards.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { Card } from \"../../interfaces\";\nimport { CardsStore } from \"../../store/cards.store\";\nimport { CardFormComponent } from \"../../components/card-form/card-form.component\";\n\n@Component({\n  selector: \"bb-cards\",\n  templateUrl: \"./cards.component.html\",\n  providers: [CardsStore],\n})\nexport class CardsComponent {\n  readonly cards$ = this.store.cards$;\n\n  constructor(private readonly store: CardsStore, public dialog: MatDialog) {}\n\n  ngOnInit() {\n    this.store.loadCards();\n  }\n\n  public onAdd() {\n    this.openFormDialog();\n  }\n\n  public onEditCard(card: Card) {\n    this.openFormDialog(card);\n  }\n\n  public onCardDelete(cardId: string) {\n    this.store.removeCard(cardId);\n  }\n\n  private openFormDialog(card?: Card) {\n    const dialogRef = this.dialog.open(CardFormComponent, {\n      hasBackdrop: false,\n      ...(card && { data: { card } }),\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (!card) {\n        return false;\n      }\n\n      if (card) {\n        this.store.updateCard(result);\n      } else {\n        this.store.addCard(result);\n      }\n    });\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/interfaces/index.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/store/cards.store.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/components/card-form/card-form.component.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/services/cards.service.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/services/cards.service.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Card } from \"../interfaces\";\n\n@Injectable()\nexport class CardsService {\n  constructor(private http: HttpClient) {}\n\n  getCards() {\n    return this.http.get<Card[]>(\"https://61b194e53c954f001722aa1c.mockapi.io/api/cards\");\n  }\n\n  addCard(newCard: Card) {\n    return this.http.post(`https://61b194e53c954f001722aa1c.mockapi.io/api/cards`, newCard);\n  }\n\n  updateCard(card: Card) {\n    return this.http.put(`https://61b194e53c954f001722aa1c.mockapi.io/api/cards/${card.id}`, card);\n  }\n\n  deleteCard(cardId: string) {\n    return this.http.delete(`https://61b194e53c954f001722aa1c.mockapi.io/api/cards/${cardId}`);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/interfaces/index.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/store/cards.store.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { ComponentStore, tapResponse } from \"@ngrx/component-store\";\nimport { Observable } from \"rxjs\";\nimport { switchMap } from \"rxjs/operators\";\nimport { Card } from \"../interfaces\";\nimport { CardsService } from \"../services/cards.service\";\n\n// The state model\nexport interface CardsState {\n  cards: Card[];\n  loading: boolean;\n}\n\nconst defaultState: CardsState = {\n  cards: [],\n  loading: false,\n};\n\n@Injectable()\nexport class CardsStore extends ComponentStore<CardsState> {\n  constructor(public cardsService: CardsService) {\n    super(defaultState);\n  }\n\n  // SELECTORS\n  readonly cards$: Observable<Card[]> = this.select((state) => state.cards);\n  readonly loading$: Observable<boolean> = this.select((state) => state.loading);\n\n  // EFFECTS\n  public readonly loadCards = this.effect((trigger$: Observable<void>) =>\n    trigger$.pipe(\n      switchMap(() => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.getCards().pipe(\n          tapResponse(\n            (cards) => this.patchState((state) => ({ ...state, cards: cards || [], loading: false })),\n            (_) => this.patchState({ cards: [] }),\n          ),\n        );\n      }),\n    ),\n  );\n\n  public readonly addCard = this.effect((trigger$: Observable<Card>) =>\n    trigger$.pipe(\n      switchMap((card: Card) => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.addCard(card).pipe(\n          tapResponse(\n            (newCard: Card) =>\n              this.patchState((state) => ({\n                ...state,\n                cards: [...state.cards, newCard],\n                loading: false,\n              })),\n            (_) => this.patchState((state) => ({ cards: state.cards })),\n          ),\n        );\n      }),\n    ),\n  );\n\n  public readonly updateCard = this.effect((trigger$: Observable<Card>) =>\n    trigger$.pipe(\n      switchMap((card: Card) => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.updateCard(card).pipe(\n          tapResponse(\n            () =>\n              this.patchState((state) => {\n                const updatedCards = state.cards.map((c: Card) => (c.id === card.id ? { ...c, ...card } : c));\n\n                return {\n                  ...state,\n                  cards: [...updatedCards],\n                  loading: false,\n                };\n              }),\n            (_) => this.patchState((state) => ({ cards: state.cards })),\n          ),\n        );\n      }),\n    ),\n  );\n\n  public readonly removeCard = this.effect((trigger$: Observable<string>) =>\n    trigger$.pipe(\n      switchMap((cardId: string) => {\n        this.patchState({ loading: true });\n\n        return this.cardsService.deleteCard(cardId).pipe(\n          tapResponse(\n            () =>\n              this.patchState((state) => {\n                const updatedCards = state.cards.filter((card) => card.id !== cardId);\n\n                return {\n                  ...state,\n                  cards: [...updatedCards],\n                  loading: false,\n                };\n              }),\n            (_) => this.patchState((state) => ({ cards: state.cards })),\n          ),\n        );\n      }),\n    ),\n  );\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/interfaces/index.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/unit-cards/services/cards.service.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/app.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bb-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"],\n})\nexport class AppComponent {\n  constructor() {}\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/directives/ng-let.directive.ts",{"fileContent":"import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from \"@angular/core\";\n\nexport class LetContext<T> {\n  constructor(private readonly dir: LetDirective<T>) {}\n\n  get ngLet(): T {\n    return this.dir.ngLet;\n  }\n}\n\n/**\n * Works like *ngIf but does not have a condition\n * Use it to declare the result of pipes calculation\n * (i.e. async pipe)\n *\n * <ng-container *ngLet=\"stream$ | async as value\">\n *   {{ value }}\n * </ng-container>\n */\n@Directive({\n  selector: \"[bbNgLet]\",\n})\nexport class LetDirective<T> {\n  @Input()\n  ngLet: T;\n\n  constructor(\n    @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\n    @Inject(TemplateRef) templateRef: TemplateRef<LetContext<T>>,\n  ) {\n    viewContainer.createEmbeddedView(templateRef, new LetContext<T>(this));\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/directives/alphabet-only.directive.ts",{"fileContent":"import { Directive, HostListener } from \"@angular/core\";\n\n@Directive({\n  selector: \"[bbAlphabetOnly]\",\n})\nexport class AlphabetOnlyDirective {\n  @HostListener(\"keydown\", [\"$event\"]) public onKeydown(event: KeyboardEvent) {\n    if (\n      (event.keyCode >= 15 && event.keyCode <= 64) ||\n      event.keyCode >= 123 ||\n      (event.keyCode >= 96 && event.keyCode <= 105)\n    ) {\n      event.preventDefault();\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/directives/uppercase.directive.ts",{"fileContent":"import { Directive, ElementRef, HostListener } from \"@angular/core\";\n\n@Directive({\n  selector: \"[bbUppercase]\",\n})\nexport class UppercaseDirective {\n  constructor(public ref: ElementRef) {}\n\n  @HostListener(\"input\", [\"$event\"]) public onInput(event: { target: HTMLInputElement }) {\n    this.ref.nativeElement.value = event.target.value.toUpperCase();\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/directives/numeric.directive.ts",{"fileContent":"import { Directive, ElementRef, HostListener } from \"@angular/core\";\n\n@Directive({\n  selector: \"[bbNumeric]\",\n})\nexport class NumberDirective {\n  constructor(private _el: ElementRef) {}\n\n  @HostListener(\"input\", [\"$event\"]) public onInputChange(event: any) {\n    const initalValue = this._el.nativeElement.value;\n    this._el.nativeElement.value = initalValue.replace(/[^0-9]*/g, \"\");\n    if (initalValue !== this._el.nativeElement.value) {\n      event.stopPropagation();\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/enums/view-type.enum.ts",{"fileContent":"export enum EViewType {\n  GRID = \"GRID\",\n  LIST = \"LIST\",\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/pipes/remove-white-space.pipe.ts",{"fileContent":"import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"removeWhiteSpace\",\n})\nexport class RemoveWhiteSpacePipe implements PipeTransform {\n  transform(value: string): string {\n    if (value === undefined) return \"undefined\";\n\n    return value.replace(/\\s/g, \"\");\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/pipes/reverse.pipe.ts",{"fileContent":"import { Pipe, PipeTransform } from \"@angular/core\";\n\n// Annotation section\n@Pipe({\n  name: \"reverseStr\",\n})\n\n// Pipe class\nexport class ReverseStrPipe implements PipeTransform {\n  transform(value: string): string {\n    if (value === undefined) return \"\";\n\n    let newStr = \"\";\n    for (let i = value.length - 1; i >= 0; i--) {\n      newStr += value.charAt(i);\n    }\n\n    return newStr;\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/components/loader/loader.component.ts",{"fileContent":"import { Component, OnInit } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\nimport { LoaderService } from \"@core/services/loader.service\";\n\n@Component({\n  selector: \"bb-loader\",\n  templateUrl: \"./loader.component.html\",\n  styleUrls: [\"./loader.component.scss\"],\n})\nexport class LoaderComponent implements OnInit {\n  loading$: Observable<boolean> = of(false);\n\n  constructor(private loaderService: LoaderService) {}\n\n  ngOnInit() {\n    this.loading$ = this.loaderService.status;\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/loader.service.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/modules/validation-message/validation-message.component.ts",{"fileContent":"import { ChangeDetectionStrategy, Component, Input } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\n\n@Component({\n  selector: \"bb-validation-message\",\n  styleUrls: [\"validation-message.component.scss\"],\n  templateUrl: \"validation-message.component.html\",\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ValidationMessageComponent {\n  @Input()\n  public control!: FormControl;\n\n  get errors(): { [key: string]: any } {\n    return this.control.errors || {};\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/modules/validation-message/format-error-message.pipe.ts",{"fileContent":"import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: \"formatErrorMessage\",\n})\nexport class FormatErrorMessagePipe implements PipeTransform {\n  constructor() {}\n  public transform(validationError: { key: string; value: any }): any {\n    return this.getFormattedErrorMessage(validationError.key, validationError.value);\n  }\n\n  private getFormattedErrorMessage(validatorName: string, validatorValue?: any) {\n    const config: any = {\n      required: \"This field cannot be left blank\",\n      minlength: `Minimum length ${validatorValue.requiredLength}`,\n      maxlength: `Maximum length ${validatorValue.requiredLength}`,\n      min: `Minimum value is ${validatorValue.min}`,\n      max: `Maximum value should be less then ${validatorValue.max}`,\n      pattern: \"Control has leading whitespace\",\n      rangeDate: \"Date range is not valid\",\n      wrongPasswordFormat: \"Password is not valid\",\n    };\n\n    return config[validatorName];\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/containers/users/users.component.ts",{"fileContent":"import { Component, ViewChild, TemplateRef } from \"@angular/core\";\nimport { EViewType } from \"@shared/enums\";\nimport { UsersFacadeService } from \"../../services/users-facade.service\";\n\n@Component({\n  selector: \"bb-users\",\n  templateUrl: \"./users.component.html\",\n  styleUrls: [\"./users.component.scss\"],\n})\nexport class UsersComponent {\n  @ViewChild(\"cardTemplate\", { static: false }) cardTemplate: TemplateRef<HTMLElement>;\n  @ViewChild(\"listTemplate\", { static: false }) listTemplate: TemplateRef<HTMLElement>;\n\n  public eViewType = EViewType;\n  public mode: EViewType = EViewType.GRID;\n  public users$ = this.usersFacadeService.getUsers();\n\n  constructor(public usersFacadeService: UsersFacadeService) {}\n\n  public onViewChage(type: EViewType) {\n    this.mode = type;\n  }\n\n  public get template() {\n    return this.mode === EViewType.GRID ? this.cardTemplate : this.listTemplate;\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/enums/index.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/services/users-facade.service.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/@shared/enums/view-type.enum.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/services/users.service.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/interfaces/index.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/components/users-view/users-view.component.ts",{"fileContent":"import { Component, Input, TemplateRef, ChangeDetectionStrategy } from \"@angular/core\";\n\n@Component({\n  selector: \"bb-users-view\",\n  templateUrl: \"./users-view.component.html\",\n  styleUrls: [\"./users-view.component.scss\"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UsersViewComponent {\n  @Input() users: any[] = [];\n  @Input() userTemplate: TemplateRef<HTMLElement>;\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/services/users-facade.service.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { UsersService } from \"./users.service\";\nimport { User } from \"../interfaces\";\n\n@Injectable()\nexport class UsersFacadeService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public getUsers(): Observable<User[]> {\n    return this.usersService.getUsers();\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/services/users.service.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/interfaces/index.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/services/users.service.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { User } from \"../interfaces\";\n\n@Injectable()\nexport class UsersService {\n  constructor(private http: HttpClient) {}\n\n  getUsers() {\n    return this.http.get<User[]>(\"https://61b194e53c954f001722aa1c.mockapi.io/api/users\");\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/users/interfaces/index.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/rxjs/components/random-image/random-image.component.ts",{"fileContent":"import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bb-random-image\",\n  templateUrl: \"./random-image.component.html\",\n  styleUrls: [\"./random-image.component.scss\"],\n})\nexport class RandomImageComponent {\n  @Input() public image!: any;\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/rxjs/components/chart-line/chart-line.component.ts",{"fileContent":"import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\nimport { normalizeCommonJSImport } from \"../../../../utils/normalizeCommonJSImport\";\n\nconst importChart = normalizeCommonJSImport(import(/* webpackChunkName: \"chart\" */ \"chart.js\"));\n\n@Component({\n  selector: \"l9-chart-line\",\n  templateUrl: \"./chart-line.component.html\",\n  styleUrls: [\"./chart-line.component.scss\"],\n})\nexport class ChartLineComponent implements OnInit {\n  @ViewChild(\"chart\", { static: false }) chartElement: ElementRef<HTMLCanvasElement>;\n\n  constructor() {}\n\n  public async ngOnInit() {\n    const Chart = await importChart;\n\n    new Chart(this.chartElement.nativeElement, {\n      // The type of chart we want to create\n      type: \"line\",\n\n      // The data for our dataset\n      data: {\n        labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n        datasets: [\n          {\n            label: \"My First dataset\",\n            backgroundColor: \"rgb(255, 99, 132)\",\n            borderColor: \"rgb(255, 99, 132)\",\n            data: [0, 10, 5, 2, 20, 30, 45],\n          },\n        ],\n      },\n\n      // Configuration options go here\n      options: {},\n    });\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/utils/normalizeCommonJSImport.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/rxjs/containers/rxjs/rxjs.component.ts",{"fileContent":"import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from \"@angular/core\";\nimport { timer, Observable, of, concat, fromEvent, BehaviorSubject } from \"rxjs\";\nimport { TodosService } from \"../../services/todos.service\";\nimport { ITodo } from \"../../interfaces\";\nimport { map, tap, switchMap, scan } from \"rxjs/operators\";\nimport { HttpClient } from \"@angular/common/http\";\n\nexport const enum TlcDeviceEnum {\n  OCIT = \"ocit\",\n  OCIT_C = \"ocit-c\",\n  STCIP = \"stcip\",\n}\n\n@Component({\n  selector: \"bb-rxjs\",\n  templateUrl: \"./rxjs.component.html\",\n  styleUrls: [\"./rxjs.component.scss\"],\n})\nexport class RxjsComponent implements OnInit, AfterViewInit {\n  @ViewChild(\"button\", { static: true }) button: ElementRef;\n  @ViewChild(\"imageButton\", { static: true }) imageButton: ElementRef;\n\n  private _total$ = new BehaviorSubject<any>({\n    [TlcDeviceEnum.OCIT]: 0,\n    [TlcDeviceEnum.OCIT_C]: 1,\n    [TlcDeviceEnum.STCIP]: 2,\n  });\n  public total$ = this._total$.asObservable();\n\n  public completed$: Observable<ITodo[]>;\n  public inProgress$: Observable<ITodo[]>;\n  public randomImage$: Observable<any>;\n\n  constructor(public todosService: TodosService, private httpClient: HttpClient) {}\n\n  ngOnInit() {\n    // this.simpleRxDefinition();\n    // this.createTwoStreamsFromOne();\n    // this.contactTwoIntoOne();\n    this.calculateFromStream();\n  }\n\n  ngAfterViewInit(): void {\n    fromEvent(this.button.nativeElement, \"click\")\n      .pipe(\n        tap((e) => console.log(e)),\n        // concatMap(() => this.todosService.getTodos()),\n        // mergeMap(() => this.todosService.getTodos()),\n        // exhaustMap(() => this.todosService.getTodos()),\n        switchMap(() => this.todosService.getTodos()),\n      )\n      .subscribe();\n\n    this.onImageChange();\n  }\n\n  private calculateFromStream() {\n    const t$ = this.total$.pipe(\n      scan((acc, curr) => {\n        for (var key of Object.keys(curr)) {\n          if (curr[key] > 0) {\n            acc += 1;\n          }\n        }\n        return acc;\n      }, 0),\n    );\n\n    t$.subscribe((t) => console.log(t));\n  }\n\n  public onImageChange() {\n    this.randomImage$ = fromEvent(this.imageButton.nativeElement, \"click\").pipe(\n      map((d) => this.randomNumber(1, 100)),\n      switchMap((id) => {\n        if (id) {\n          return this.todosService.getPhotoById(id);\n        } else {\n          return of({});\n        }\n      }),\n    );\n  }\n\n  public contactTwoIntoOne() {\n    const stream1$ = of(1, 2, 3);\n    const stream2$ = timer(0, 1000);\n    const stream3$ = of(4, 5, 6);\n\n    const result$ = concat(stream1$, stream2$, stream3$);\n\n    result$.subscribe(console.log);\n  }\n\n  public fireClientError(it: any) {\n    // throw new Error('Client Error. Shit happens :)');\n    // it is not defined, ups\n    return it.happens;\n  }\n\n  public fireServerError() {\n    this.httpClient.get(\"https://jsonplaceholder.typicode.com/1\").subscribe();\n  }\n\n  private simpleRxDefinition() {\n    // create Observable\n    const timer$ = timer(0, 1000);\n\n    timer$.subscribe(\n      (v) => console.log(v),\n      (err) => console.log(err),\n      () => console.log(\"Completed\"),\n    );\n  }\n\n  private createTwoStreamsFromOne() {\n    // uncomment HTML\n    // map, tap\n    this.completed$ = this.todosService.getTodos().pipe(\n      tap((d) => console.log(d)),\n      map((todos: ITodo[]) => todos.filter((todo: ITodo) => todo.completed)),\n    );\n\n    this.inProgress$ = this.todosService\n      .getTodos()\n      .pipe(map((todos: ITodo[]) => todos.filter((todo: ITodo) => !todo.completed)));\n  }\n\n  // Function to generate random number\n  private randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/rxjs/services/todos.service.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/rxjs/interfaces/index.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/rxjs/services/todos.service.ts",{"fileContent":"import { shareReplay, take } from \"rxjs/operators\";\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Injectable()\nexport class TodosService {\n  constructor(private http: HttpClient) {}\n\n  getTodos() {\n    return this.http.get(\"https://jsonplaceholder.typicode.com/todos\");\n  }\n\n  getPhotoById(id: number) {\n    return this.http.get(`https://jsonplaceholder.typicode.com/photos/${id}`);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/blue-device/blue-device.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { trigger, transition, style, animate } from \"@angular/animations\";\n\n@Component({\n  selector: \"bb-blue-device\",\n  templateUrl: \"./blue-device.component.html\",\n  styleUrls: [\"./blue-device.component.scss\"],\n  animations: [\n    trigger(\"fadeInOut\", [\n      transition(\":enter\", [style({ opacity: 0 }), animate(500, style({ opacity: 1 }))]),\n      transition(\":leave\", [animate(500, style({ opacity: 0 }))]),\n    ]),\n  ],\n})\nexport class BlueDeviceComponent {}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/red-device/red-device.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { trigger, transition, style, animate } from \"@angular/animations\";\n\n@Component({\n  selector: \"bb-red-device\",\n  templateUrl: \"./red-device.component.html\",\n  styleUrls: [\"./red-device.component.scss\"],\n  animations: [\n    trigger(\"fadeInOut\", [\n      transition(\":enter\", [style({ opacity: 0 }), animate(500, style({ opacity: 1 }))]),\n      transition(\":leave\", [animate(500, style({ opacity: 0 }))]),\n    ]),\n  ],\n})\nexport class RedDeviceComponent {}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/green-device/green-device.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\nimport { trigger, transition, style, animate } from \"@angular/animations\";\n\n@Component({\n  selector: \"bb-green-device\",\n  templateUrl: \"./green-device.component.html\",\n  styleUrls: [\"./green-device.component.scss\"],\n  animations: [\n    trigger(\"fadeInOut\", [\n      transition(\":enter\", [style({ opacity: 0 }), animate(500, style({ opacity: 1 }))]),\n      transition(\":leave\", [animate(500, style({ opacity: 0 }))]),\n    ]),\n  ],\n})\nexport class GreenDeviceComponent {}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/tree-view/tree-view.component.ts",{"fileContent":"import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"l9-tree-view\",\n  templateUrl: \"./tree-view.component.html\",\n  styleUrls: [\"./tree-view.component.scss\"],\n})\nexport class TreeViewComponent {\n  public list = [\n    {\n      title: \"childless\",\n      children: [],\n    },\n    {\n      title: \"great grandparent\",\n      children: [\n        {\n          title: \"childless grandsibiling\",\n          children: [],\n        },\n        {\n          title: \"grandparent\",\n          children: [\n            {\n              title: \"childless sibiling\",\n              children: [],\n            },\n            {\n              title: \"another childless sibiling\",\n              children: [],\n            },\n            {\n              title: \"parent\",\n              children: [\n                {\n                  title: \"child\",\n                  children: [],\n                },\n                {\n                  title: \"another child\",\n                  children: [],\n                },\n              ],\n            },\n            {\n              title: \"another parent\",\n              children: [\n                {\n                  title: \"child\",\n                  children: [],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          title: \"another grandparent\",\n          children: [\n            {\n              title: \"parent\",\n              children: [\n                {\n                  title: \"child\",\n                  children: [],\n                },\n                {\n                  title: \"another child\",\n                  children: [],\n                },\n                {\n                  title: \"a third child\",\n                  children: [],\n                },\n                {\n                  title: \"teen mother\",\n                  children: [\n                    {\n                      title: \"accident\",\n                      children: [],\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ];\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/route-reusable-strategy.ts",{"fileContent":"import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from \"@angular/router\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * A route strategy allowing for explicit route reuse.\n * Used as a workaround for https://github.com/angular/angular/issues/18374\n * To reuse a given route, add `data: { reuse: true }` to the route definition.\n *\n * * @example ```json\n *   {\n *       path: \"overview\",\n *       component: OverviewComponent,\n *        data: {\n *            noReuse: true,\n *        },\n *    },\n * ```\n */\n@Injectable()\nexport class RouteReusableStrategy extends RouteReuseStrategy {\n  public shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle | null): void {}\n\n  public shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    return null;\n  }\n\n  public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    // Reuse the route if the RouteConfig is the same, or if both routes use the\n    // same component, because the latter can have different RouteConfigs.\n    if (future.data && Boolean(future.data.noReuse)) {\n      return !future.data.noReuse;\n    }\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/containers/devices/devices.component.ts",{"fileContent":"import {\n  Component,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  OnDestroy,\n} from \"@angular/core\";\n\nimport { BlueDeviceComponent } from \"../../components/blue-device/blue-device.component\";\nimport { RedDeviceComponent } from \"../../components/red-device/red-device.component\";\nimport { GreenDeviceComponent } from \"../../components/green-device/green-device.component\";\nimport { TreeViewComponent } from \"../../components/tree-view/tree-view.component\";\n\n@Component({\n  selector: \"bb-devices\",\n  templateUrl: \"./devices.component.html\",\n  styleUrls: [\"./devices.component.scss\"],\n})\nexport class DevicesComponent implements OnInit, OnDestroy {\n  @ViewChild(\"dynamicLoadDevicesComponent\", { read: ViewContainerRef, static: true }) public entry: ViewContainerRef;\n  componentRef: ComponentRef<any>;\n\n  constructor(private resolver: ComponentFactoryResolver) {}\n\n  public ngOnInit() {\n    this.createComponent(\"green\");\n  }\n\n  public createComponent(type: string) {\n    this.entry.clear();\n    const factory = this.resolver.resolveComponentFactory(this.defineComponent(type));\n    this.componentRef = this.entry.createComponent(factory);\n  }\n\n  public defineComponent(type: string) {\n    return {\n      red: RedDeviceComponent,\n      green: GreenDeviceComponent,\n      blue: BlueDeviceComponent,\n      tree: TreeViewComponent,\n    }[type];\n  }\n\n  public ngOnDestroy() {\n    this.componentRef.destroy();\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/blue-device/blue-device.component.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/red-device/red-device.component.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/green-device/green-device.component.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/app/dynamic-components/components/tree-view/tree-view.component.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/tokens/app-lang.ts",{"fileContent":"import { InjectionToken } from \"@angular/core\";\n\nexport const APP_LANG = new InjectionToken<string>(\"Default App Lang\");\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/tokens/app-name.ts",{"fileContent":"import { InjectionToken } from \"@angular/core\";\n\nexport const APP_NAME = new InjectionToken<string>(\"App Name\");\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/interceptor/jwt-interceptor.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { Observable, of } from \"rxjs\";\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  logStyle = \"color: red; font-size: 1rem;\";\n\n  constructor() {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // add a custom header\n    request = request.clone({\n      setHeaders: {\n        authorization: \"Bearer token\",\n      },\n    });\n\n    return next.handle(request);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/interceptor/api-prefix.interceptor.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\n\nimport { environment } from \"@env/environment\";\n\n/**\n * Prefixes all requests not starting with `http[s]` with `environment.serverUrl`.\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ApiPrefixInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!/^(http|https):/i.test(request.url)) {\n      request = request.clone({ url: environment.serverUrl + request.url });\n    }\n    return next.handle(request);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/environments/environment.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/app-init.service.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class AppInitService {\n  constructor() {}\n  load() {\n    return new Promise<void>((resolve) => {\n      console.log(\"AppInitService.init() called\");\n      // do your initialisation stuff here\n      setTimeout(() => {\n        console.log(\"AppInitService Finished\");\n        resolve();\n      }, 500);\n    });\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/loader.service.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\n@Injectable({ providedIn: \"root\" })\nexport class LoaderService {\n  private isVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  get status() {\n    return this.isVisible;\n  }\n\n  display(value: boolean) {\n    this.isVisible.next(value);\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/interceptor/http-error.interceptor.ts",{"fileContent":"import { Injectable } from \"@angular/core\";\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { finalize, retry } from \"rxjs/operators\";\n\nimport { LoaderService } from \"@core/services/loader.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(public loaderService: LoaderService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.loaderService.display(true);\n    // If the call fails, retry until 2 times before throwing an error\n    return next.handle(request).pipe(\n      retry(2),\n      finalize(() => {\n        this.loaderService.display(false);\n      }),\n    );\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/loader.service.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/logger.service.ts",{"fileContent":"/* eslint no-console: 0 no-shadow: 0 */\n/**\n * Simple logger system with the possibility of registering custom outputs.\n *\n * 4 different log levels are provided, with corresponding methods:\n * - debug   : for debug information\n * - info    : for informative status of the application (success, ...)\n * - warning : for non-critical errors that do not prevent normal application behavior\n * - error   : for critical errors that prevent normal application behavior\n *\n * Example usage:\n * ```\n * import { Logger } from 'app/core/logger.service';\n *\n * const log = new Logger('myFile');\n * ...\n * log.debug('something happened');\n * ```\n *\n * To disable debug and info logs in production, add this snippet to your root component:\n * ```\n * export class AppComponent implements OnInit {\n *   ngOnInit() {\n *     if (environment.production) {\n *       Logger.enableProductionMode();\n *     }\n *     ...\n *   }\n * }\n *\n * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.\n */\n\n/**\n * The possible log levels.\n * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.\n */\nexport enum LogLevel {\n  off = 0,\n  error,\n  warning,\n  info,\n  debug,\n}\n\n/**\n * Log output handler function.\n */\nexport type LogOutput = (source: string | undefined, level: LogLevel, ...objects: any[]) => void;\n\nexport class Logger {\n  /**\n   * Current logging level.\n   * Set it to LogLevel.OFF to disable logs completely.\n   */\n  static level = LogLevel.debug;\n\n  /**\n   * Additional log outputs.\n   */\n  static outputs: LogOutput[] = [];\n\n  constructor(private source?: string) {}\n\n  /**\n   * Enables production mode.\n   * Sets logging level to LogLevel.warning.\n   */\n  static enableProductionMode() {\n    Logger.level = LogLevel.warning;\n  }\n\n  /**\n   * Logs messages or objects  with the debug level.\n   * Works the same as console.log().\n   */\n  debug(...objects: any[]) {\n    this.log(console.log, LogLevel.debug, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the info level.\n   * Works the same as console.log().\n   */\n  info(...objects: any[]) {\n    this.log(console.info, LogLevel.info, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the warning level.\n   * Works the same as console.log().\n   */\n  warn(...objects: any[]) {\n    this.log(console.warn, LogLevel.warning, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the error level.\n   * Works the same as console.log().\n   */\n  error(...objects: any[]) {\n    this.log(console.error, LogLevel.error, objects);\n  }\n\n  private log(func: (...args: any[]) => void, level: LogLevel, objects: any[]) {\n    if (level <= Logger.level) {\n      const log = this.source ? [\"[\" + this.source + \"]\"].concat(objects) : objects;\n      func.apply(console, log);\n      Logger.outputs.forEach((output) => output.apply(output, [this.source, level, ...objects]));\n    }\n  }\n}\n","resolvedModuleNames":[]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/global-error-handler.ts",{"fileContent":"import { ErrorHandler, Injectable, Injector } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Logger } from \"../services/logger.service\";\nimport { environment } from \"@env/environment\";\n\nconst log = new Logger(\"GlobalErrorHandler\");\n\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n  constructor(private injector: Injector) {}\n\n  handleError(error: Error | HttpErrorResponse) {\n    if (error instanceof HttpErrorResponse) {\n      // Server error happened\n      this.handleServerError(error);\n    } else {\n      // Client Error Happend\n      this.handleClientError(error);\n    }\n  }\n\n  // Customize the default server error handler here if needed\n  private handleServerError(error: HttpErrorResponse) {\n    if (!navigator.onLine) {\n      // No Internet connection\n      alert(\"No Internet Connection\");\n    }\n\n    if (!environment.production) {\n      // Http Error\n      // Show notification to the user\n      log.error(\"Request error\", error);\n      alert(`${error.status} - ${error.message}`);\n    }\n  }\n\n  private handleClientError(error: Error) {\n    log.error(error);\n  }\n}\n","resolvedModuleNames":["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/services/logger.service.ts","/Users/l.kuzenko/PERSONAL/ng-start/src/environments/environment.ts"]}],["/Users/l.kuzenko/PERSONAL/ng-start/src/app/@core/guards/module-import-guard.ts",{"fileContent":"export function throwIfAlreadyLoaded(parentModule: any, moduleName: string) {\n  if (parentModule) {\n    throw new Error(`${moduleName} has already been loaded. Import Core modules in the AppModule only.`);\n  }\n}\n","resolvedModuleNames":[]}]]